;  ASM code generated by mikroVirtualMachine for PIC - V. 8.0.0.0
;  Date/Time: 25/6/2020 8:38:14 μμ
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$EFCD	F006			GOTO	_main
$0008	$	_Delay_1us:
;Delays.c,7 :: 			void Delay_1us() {
;Delays.c,8 :: 			Delay_us(1);
$0008	$0000	    			NOP
$000A	$0000	    			NOP
;Delays.c,9 :: 			}
$000C	$0012	    			RETURN
$000E	$	_Delay_5500us:
;Delays.c,31 :: 			void Delay_5500us() {
;Delays.c,32 :: 			Delay_us(5500);
$000E	$0E0F	    			MOVLW	15
$0010	$6E0B	    			MOVWF	STACK_11, 0
$0012	$0EFF	    			MOVLW	255
$0014	$6E0A	    			MOVWF	STACK_10, 0
$0016	$2E0B	    			DECFSZ	STACK_11, F, 0
$0018	$D001	    			BRA	$+2
$001A	$D003	    			BRA	$+4
$001C	$2E0A	    			DECFSZ	STACK_10, F, 0
$001E	$D7FE	    			BRA	$-1
$0020	$D7FA	    			BRA	$-5
$0022	$0E3E	    			MOVLW	62
$0024	$6E0A	    			MOVWF	STACK_10, 0
$0026	$2E0A	    			DECFSZ	STACK_10, F, 0
$0028	$D7FE	    			BRA	$-1
;Delays.c,33 :: 			}
$002A	$0012	    			RETURN
$002C	$	_Delay_50us:
;Delays.c,19 :: 			void Delay_50us() {
;Delays.c,20 :: 			Delay_us(50);
$002C	$0E21	    			MOVLW	33
$002E	$6E0A	    			MOVWF	STACK_10, 0
$0030	$2E0A	    			DECFSZ	STACK_10, F, 0
$0032	$D7FE	    			BRA	$-1
;Delays.c,21 :: 			}
$0034	$0012	    			RETURN
$0036	$	SoftI2C_PutZerosToLAT:
$0036	$0E09	    			MOVLW	9
$0038	$5C15	    			SUBWF	___porti2c, 0, 0
$003A	$6EE1	    			MOVWF	FSR1L, 0
$003C	$0E0F	    			MOVLW	15
$003E	$6EE2	    			MOVWF	FSR1H, 0
$0040	$98E7	    			BCF	INDF1, ____sdai2c, 0
$0042	$96E7	    			BCF	INDF1, ____scli2c, 0
$0044	$0012	    			RETURN
$0046	$	_Lcd8_Cmd:
$0046	$C016	FFE9			MOVFF	Lcd8bit_main_global_dataAddress, FSR0L
$004A	$C017	FFEA			MOVFF	Lcd8bit_main_global_dataAddress+1, FSR0H
$004E	$C018	FFE1			MOVFF	Lcd8bit_main_global_ctrlAddress, FSR1L
$0052	$C019	FFE2			MOVFF	Lcd8bit_main_global_ctrlAddress+1, FSR1H
$0056	$6AEF	    			CLRF	INDF0, 0
$0058	$5241	    			MOVF	FARG_Lcd8_Cmd+0, 1, 0
$005A	$E000	    			BZ	L_Lcd8_Cmd_0
$005C	$	L_Lcd8_Cmd_0:
$005C	$BE41	    			BTFSC	FARG_Lcd8_Cmd+0, 7, 0
$005E	$8EEF	    			BSF	INDF0, __LCD8_DB7, 0
$0060	$BC41	    			BTFSC	FARG_Lcd8_Cmd+0, 6, 0
$0062	$8CEF	    			BSF	INDF0, __LCD8_DB6, 0
$0064	$BA41	    			BTFSC	FARG_Lcd8_Cmd+0, 5, 0
$0066	$8AEF	    			BSF	INDF0, __LCD8_DB5, 0
$0068	$B841	    			BTFSC	FARG_Lcd8_Cmd+0, 4, 0
$006A	$88EF	    			BSF	INDF0, __LCD8_DB4, 0
$006C	$B641	    			BTFSC	FARG_Lcd8_Cmd+0, 3, 0
$006E	$86EF	    			BSF	INDF0, __LCD8_DB3, 0
$0070	$B441	    			BTFSC	FARG_Lcd8_Cmd+0, 2, 0
$0072	$84EF	    			BSF	INDF0, __LCD8_DB2, 0
$0074	$B241	    			BTFSC	FARG_Lcd8_Cmd+0, 1, 0
$0076	$82EF	    			BSF	INDF0, __LCD8_DB1, 0
$0078	$B041	    			BTFSC	FARG_Lcd8_Cmd+0, 0, 0
$007A	$80EF	    			BSF	INDF0, __LCD8_DB0, 0
$007C	$501A	    			MOVF	Lcd8bit_main_global_cmd, 0, 0
$007E	$0A01	    			XORLW	1
$0080	$E103	    			BNZ	L_Lcd8_Cmd_1
$0082	$94E7	    			BCF	INDF1, __LCD8_RS, 0
$0084	$EF45	F000			GOTO	L_Lcd8_Cmd_2
$0088	$	L_Lcd8_Cmd_1:
$0088	$84E7	    			BSF	INDF1, __LCD8_RS, 0
$008A	$	L_Lcd8_Cmd_2:
$008A	$82E7	    			BSF	INDF1, __LCD8_ENABLE, 0
$008C	$EC04	F000			CALL	_Delay_1us
$0090	$92E7	    			BCF	INDF1, __LCD8_ENABLE, 0
$0092	$501A	    			MOVF	Lcd8bit_main_global_cmd, 0, 0
$0094	$0A01	    			XORLW	1
$0096	$E103	    			BNZ	L_Lcd8_Cmd_3
$0098	$EC07	F000			CALL	_Delay_5500us
$009C	$D002	    			BRA	L_Lcd8_Cmd_4
$009E	$	L_Lcd8_Cmd_3:
$009E	$EC16	F000			CALL	_Delay_50us
$00A2	$	L_Lcd8_Cmd_4:
$00A2	$0012	    			RETURN
$00A4	$	_Mul_32x32_U:
$00A4	$0100	    			MOVLB	0
$00A6	$0E22	    			MOVLW	34
$00A8	$6E0C	    			MOVWF	STACK_12, 0
$00AA	$6A08	    			CLRF	STACK_8, 0
$00AC	$6A09	    			CLRF	STACK_9, 0
$00AE	$6A0A	    			CLRF	STACK_10, 0
$00B0	$6A0B	    			CLRF	STACK_11, 0
$00B2	$	_NEXT:
$00B2	$060C	    			DECF	STACK_12, F, 0
$00B4	$B4D8	    			BTFSC	STATUS, Z, 0
$00B6	$EF7F	F000			GOTO	_EXIT2
$00BA	$90D8	    			BCF	STATUS, C, 0
$00BC	$	_LOOP:
$00BC	$320B	    			RRCF	STACK_11, F, 0
$00BE	$320A	    			RRCF	STACK_10, F, 0
$00C0	$3209	    			RRCF	STACK_9, F, 0
$00C2	$3208	    			RRCF	STACK_8, F, 0
$00C4	$3203	    			RRCF	STACK_3, F, 0
$00C6	$3202	    			RRCF	STACK_2, F, 0
$00C8	$3201	    			RRCF	STACK_1, F, 0
$00CA	$3200	    			RRCF	STACK_0, F, 0
$00CC	$A0D8	    			BTFSS	STATUS, C, 0
$00CE	$EF59	F000			GOTO	_NEXT
$00D2	$060C	    			DECF	STACK_12, F, 0
$00D4	$B4D8	    			BTFSC	STATUS, Z, 0
$00D6	$EF77	F000			GOTO	_EXIT1
$00DA	$5004	    			MOVF	STACK_4, W, 0
$00DC	$2608	    			ADDWF	STACK_8, F, 0
$00DE	$5005	    			MOVF	STACK_5, W, 0
$00E0	$2209	    			ADDWFC	STACK_9, F, 0
$00E2	$5006	    			MOVF	STACK_6, W, 0
$00E4	$220A	    			ADDWFC	STACK_10, F, 0
$00E6	$5007	    			MOVF	STACK_7, W, 0
$00E8	$220B	    			ADDWFC	STACK_11, F, 0
$00EA	$EF5E	F000			GOTO	_LOOP
$00EE	$	_EXIT1:
$00EE	$5004	    			MOVF	STACK_4, W, 0
$00F0	$2608	    			ADDWF	STACK_8, F, 0
$00F2	$5005	    			MOVF	STACK_5, W, 0
$00F4	$2209	    			ADDWFC	STACK_9, F, 0
$00F6	$5006	    			MOVF	STACK_6, W, 0
$00F8	$220A	    			ADDWFC	STACK_10, F, 0
$00FA	$5007	    			MOVF	STACK_7, W, 0
$00FC	$220B	    			ADDWFC	STACK_11, F, 0
$00FE	$	_EXIT2:
$00FE	$0012	    			RETURN
$0100	$	_Delay_22us:
;Delays.c,15 :: 			void Delay_22us() {
;Delays.c,16 :: 			Delay_us(22);
$0100	$0E0E	    			MOVLW	14
$0102	$6E0A	    			MOVWF	STACK_10, 0
$0104	$2E0A	    			DECFSZ	STACK_10, F, 0
$0106	$D7FE	    			BRA	$-1
$0108	$0000	    			NOP
;Delays.c,17 :: 			}
$010A	$0012	    			RETURN
$010C	$	_Div_16x16_U:
$010C	$0100	    			MOVLB	0
$010E	$6A08	    			CLRF	STACK_8, 0
$0110	$6A09	    			CLRF	STACK_9, 0
$0112	$0E10	    			MOVLW	16
$0114	$6E0C	    			MOVWF	STACK_12, 0
$0116	$3401	    			RLCF	STACK_1, W, 0
$0118	$3608	    			RLCF	STACK_8, F, 0
$011A	$3609	    			RLCF	STACK_9, F, 0
$011C	$5004	    			MOVF	STACK_4, W, 0
$011E	$5E08	    			SUBWF	STACK_8, F, 0
$0120	$5005	    			MOVF	STACK_5, W, 0
$0122	$A0D8	    			BTFSS	STATUS, C, 0
$0124	$3C05	    			INCFSZ	STACK_5, W, 0
$0126	$5E09	    			SUBWF	STACK_9, F, 0
$0128	$B0D8	    			BTFSC	STATUS, C, 0
$012A	$EF9E	F000			GOTO	$+8
$012E	$5004	    			MOVF	STACK_4, W, 0
$0130	$2608	    			ADDWF	STACK_8, F, 0
$0132	$5005	    			MOVF	STACK_5, W, 0
$0134	$B0D8	    			BTFSC	STATUS, C, 0
$0136	$3C05	    			INCFSZ	STACK_5, W, 0
$0138	$2609	    			ADDWF	STACK_9, F, 0
$013A	$90D8	    			BCF	STATUS, C, 0
$013C	$3600	    			RLCF	STACK_0, F, 0
$013E	$3601	    			RLCF	STACK_1, F, 0
$0140	$2E0C	    			DECFSZ	STACK_12, F, 0
$0142	$EF8B	F000			GOTO	$-21
$0146	$0012	    			RETURN
$0148	$	_Mul_16x16_S:
$0148	$0100	    			MOVLB	0
$014A	$5000	    			MOVF	STACK_0, W, 0
$014C	$0204	    			MULWF	STACK_4, 0
$014E	$CFF4	F009			MOVFF	PRODH, STACK_9
$0152	$CFF3	F008			MOVFF	PRODL, STACK_8
$0156	$5001	    			MOVF	STACK_1, W, 0
$0158	$0205	    			MULWF	STACK_5, 0
$015A	$CFF4	F00B			MOVFF	PRODH, STACK_11
$015E	$CFF3	F00A			MOVFF	PRODL, STACK_10
$0162	$5000	    			MOVF	STACK_0, W, 0
$0164	$0205	    			MULWF	STACK_5, 0
$0166	$50F3	    			MOVF	PRODL, W, 0
$0168	$2609	    			ADDWF	STACK_9, F, 0
$016A	$50F4	    			MOVF	PRODH, W, 0
$016C	$220A	    			ADDWFC	STACK_10, F, 0
$016E	$6AE8	    			CLRF	WREG, 0
$0170	$220B	    			ADDWFC	STACK_11, F, 0
$0172	$5001	    			MOVF	STACK_1, W, 0
$0174	$0204	    			MULWF	STACK_4, 0
$0176	$50F3	    			MOVF	PRODL, W, 0
$0178	$2609	    			ADDWF	STACK_9, F, 0
$017A	$50F4	    			MOVF	PRODH, W, 0
$017C	$220A	    			ADDWFC	STACK_10, F, 0
$017E	$6AE8	    			CLRF	WREG, 0
$0180	$220B	    			ADDWFC	STACK_11, F, 0
$0182	$AE05	    			BTFSS	STACK_5, 7, 0
$0184	$EFC8	F000			GOTO	$+5
$0188	$5000	    			MOVF	STACK_0, W, 0
$018A	$5C0A	    			SUBWF	STACK_10, W, 0
$018C	$5001	    			MOVF	STACK_1, W, 0
$018E	$580B	    			SUBWFB	STACK_11, W, 0
$0190	$AE01	    			BTFSS	STACK_1, 7, 0
$0192	$EFCF	F000			GOTO	$+5
$0196	$5004	    			MOVF	STACK_4, W, 0
$0198	$5C0A	    			SUBWF	STACK_10, W, 0
$019A	$5005	    			MOVF	STACK_5, W, 0
$019C	$580B	    			SUBWFB	STACK_11, W, 0
$019E	$C008	F000			MOVFF	STACK_8, STACK_0
$01A2	$C009	F001			MOVFF	STACK_9, STACK_1
$01A6	$C00A	F002			MOVFF	STACK_10, STACK_2
$01AA	$C00B	F003			MOVFF	STACK_11, STACK_3
$01AE	$0012	    			RETURN
$01B0	$	_Soft_I2C_Start:
$01B0	$C015	FFE9			MOVFF	___porti2c, FSR0L
$01B4	$0E0F	    			MOVLW	15
$01B6	$6EEA	    			MOVWF	FSR0H, 0
$01B8	$88EF	    			BSF	INDF0, ____sdai2c, 0
$01BA	$EC04	F000			CALL	_Delay_1us
$01BE	$86EF	    			BSF	INDF0, ____scli2c, 0
$01C0	$EC04	F000			CALL	_Delay_1us
$01C4	$EC1B	F000			CALL	SoftI2C_PutZerosToLAT
$01C8	$98EF	    			BCF	INDF0, ____sdai2c, 0
$01CA	$EC04	F000			CALL	_Delay_1us
$01CE	$EC1B	F000			CALL	SoftI2C_PutZerosToLAT
$01D2	$96EF	    			BCF	INDF0, ____scli2c, 0
$01D4	$0012	    			RETURN
$01D6	$	_Soft_I2C_Write:
$01D6	$0E01	    			MOVLW	1
$01D8	$6E3D	    			MOVWF	Soft_I2C_Write_result_L0, 0
$01DA	$0E08	    			MOVLW	8
$01DC	$6E3C	    			MOVWF	Soft_I2C_Write_temp_L0, 0
$01DE	$C015	FFE9			MOVFF	___porti2c, FSR0L
$01E2	$0E0F	    			MOVLW	15
$01E4	$6EEA	    			MOVWF	FSR0H, 0
$01E6	$	L_Soft_I2C_Write_4:
$01E6	$523C	    			MOVF	Soft_I2C_Write_temp_L0, 1, 0
$01E8	$E022	    			BZ	L_Soft_I2C_Write_5
$01EA	$EC04	F000			CALL	_Delay_1us
$01EE	$EC04	F000			CALL	_Delay_1us
$01F2	$EC1B	F000			CALL	SoftI2C_PutZerosToLAT
$01F6	$96EF	    			BCF	INDF0, ____scli2c, 0
$01F8	$EC04	F000			CALL	_Delay_1us
$01FC	$523B	    			MOVF	FARG_Soft_I2C_Write+0, 1, 0
$01FE	$E000	    			BZ	L_Soft_I2C_Write_6
$0200	$	L_Soft_I2C_Write_6:
$0200	$EC1B	F000			CALL	SoftI2C_PutZerosToLAT
$0204	$363B	    			RLCF	FARG_soft_i2c_write+0, F, 0
$0206	$A0D8	    			BTFSS	STATUS, 0, 0
$0208	$EF09	F001			GOTO	l_018
$020C	$88EF	    			BSF	INDF0, ____sdai2c, 0
$020E	$EF0A	F001			GOTO	l_01C
$0212	$	l_018:
$0212	$98EF	    			BCF	INDF0, ____sdai2c, 0
$0214	$	l_01C:
$0214	$0000	    			NOP
$0216	$EC04	F000			CALL	_Delay_1us
$021A	$86EF	    			BSF	INDF0, ____scli2c, 0
$021C	$0E12	    			MOVLW	18
$021E	$5EE9	    			SUBWF	FSR0L, F, 0
$0220	$A6EF	    			BTFSS	INDF0, ____scli2c, 0
$0222	$EF10	F001			GOTO	$-1
$0226	$0E12	    			MOVLW	18
$0228	$26E9	    			ADDWF	FSR0L, F, 0
$022A	$063C	    			DECF	Soft_I2C_Write_temp_L0, 1, 0
$022C	$D7DC	    			BRA	L_Soft_I2C_Write_4
$022E	$	L_Soft_I2C_Write_5:
$022E	$6A3D	    			CLRF	Soft_I2C_Write_result_L0, 0
$0230	$EC04	F000			CALL	_Delay_1us
$0234	$EC1B	F000			CALL	SoftI2C_PutZerosToLAT
$0238	$0000	    			NOP
$023A	$96EF	    			BCF	INDF0, ____scli2c, 0
$023C	$EC04	F000			CALL	_Delay_1us
$0240	$88EF	    			BSF	INDF0, ____sdai2c, 0
$0242	$EC04	F000			CALL	_Delay_1us
$0246	$EC04	F000			CALL	_Delay_1us
$024A	$523D	    			MOVF	Soft_I2C_Write_result_L0, 1, 0
$024C	$E000	    			BZ	L_Soft_I2C_Write_7
$024E	$	L_Soft_I2C_Write_7:
$024E	$86EF	    			BSF	INDF0, ____scli2c, 0
$0250	$0E12	    			MOVLW	18
$0252	$5EE9	    			SUBWF	FSR0L, F, 0
$0254	$A6EF	    			BTFSS	INDF0, ____scli2c, 0
$0256	$EF2A	F001			GOTO	$-1
$025A	$6A3D	    			CLRF	FLOC_soft_i2c_write+1, 0
$025C	$EC04	F000			CALL	_Delay_1us
$0260	$B8EF	    			BTFSC	INDF0, ____sdai2c, 0
$0262	$803D	    			BSF	FLOC_soft_i2c_write+1, 0, 0
$0264	$EC04	F000			CALL	_Delay_1us
$0268	$EC04	F000			CALL	_Delay_1us
$026C	$EC04	F000			CALL	_Delay_1us
$0270	$EC04	F000			CALL	_Delay_1us
$0274	$EC04	F000			CALL	_Delay_1us
$0278	$EC04	F000			CALL	_Delay_1us
$027C	$EC04	F000			CALL	_Delay_1us
$0280	$EC04	F000			CALL	_Delay_1us
$0284	$EC1B	F000			CALL	SoftI2C_PutZerosToLAT
$0288	$0E12	    			MOVLW	18
$028A	$26E9	    			ADDWF	FSR0L, F, 0
$028C	$96EF	    			BCF	INDF0, ____scli2c, 0
$028E	$98EF	    			BCF	INDF0, ____sdai2c, 0
$0290	$C03D	F000			MOVFF	Soft_I2C_Write_result_L0, STACK_0
$0294	$0012	    			RETURN
$0296	$	_Soft_I2C_Read:
$0296	$6A3C	    			CLRF	Soft_I2C_Read_result_L0, 0
$0298	$0E08	    			MOVLW	8
$029A	$6E3D	    			MOVWF	Soft_I2C_Read_temp_L0, 0
$029C	$C015	FFE9			MOVFF	___porti2c, FSR0L
$02A0	$0E0F	    			MOVLW	15
$02A2	$6EEA	    			MOVWF	FSR0H, 0
$02A4	$	L_Soft_I2C_Read_0:
$02A4	$523D	    			MOVF	Soft_I2C_Read_temp_L0, 1, 0
$02A6	$E01C	    			BZ	L_Soft_I2C_Read_1
$02A8	$EC04	F000			CALL	_Delay_1us
$02AC	$0000	    			NOP
$02AE	$88EF	    			BSF	INDF0, ____sdai2c, 0
$02B0	$EC04	F000			CALL	_Delay_1us
$02B4	$523C	    			MOVF	Soft_I2C_Read_result_L0, 1, 0
$02B6	$E000	    			BZ	L_Soft_I2C_Read_2
$02B8	$	L_Soft_I2C_Read_2:
$02B8	$86EF	    			BSF	INDF0, ____scli2c, 0
$02BA	$0E12	    			MOVLW	18
$02BC	$5EE9	    			SUBWF	FSR0L, F, 0
$02BE	$A6EF	    			BTFSS	INDF0, ____scli2c, 0
$02C0	$EF5F	F001			GOTO	$-1
$02C4	$B8EF	    			BTFSC	INDF0, ____sdai2c, 0
$02C6	$80D8	    			BSF	STATUS, C, 0
$02C8	$A8EF	    			BTFSS	INDF0, ____sdai2c, 0
$02CA	$90D8	    			BCF	STATUS, C, 0
$02CC	$363C	    			RLCF	FLOC_soft_i2c_read+0, F, 0
$02CE	$EC04	F000			CALL	_Delay_1us
$02D2	$EC1B	F000			CALL	SoftI2C_PutZerosToLAT
$02D6	$0E12	    			MOVLW	18
$02D8	$26E9	    			ADDWF	FSR0L, F, 0
$02DA	$96EF	    			BCF	INDF0, ____scli2c, 0
$02DC	$063D	    			DECF	Soft_I2C_Read_temp_L0, 1, 0
$02DE	$D7E2	    			BRA	L_Soft_I2C_Read_0
$02E0	$	L_Soft_I2C_Read_1:
$02E0	$88EF	    			BSF	INDF0, ____sdai2c, 0
$02E2	$EC04	F000			CALL	_Delay_1us
$02E6	$523B	    			MOVF	FARG_Soft_I2C_Read+0, 1, 0
$02E8	$E002	    			BZ	L_Soft_I2C_Read_3
$02EA	$EC1B	F000			CALL	SoftI2C_PutZerosToLAT
$02EE	$	L_Soft_I2C_Read_3:
$02EE	$503B	    			MOVF	FARG_soft_i2c_read+0, W, 0
$02F0	$B4D8	    			BTFSC	STATUS, 2, 0
$02F2	$EF7C	F001			GOTO	L_07C
$02F6	$98EF	    			BCF	INDF0, ____sdai2c, 0
$02F8	$	L_07C:
$02F8	$0000	    			NOP
$02FA	$EC04	F000			CALL	_Delay_1us
$02FE	$86EF	    			BSF	INDF0, ____scli2c, 0
$0300	$0E12	    			MOVLW	18
$0302	$5EE9	    			SUBWF	FSR0L, F, 0
$0304	$A6EF	    			BTFSS	INDF0, ____scli2c, 0
$0306	$EF82	F001			GOTO	$-1
$030A	$0E12	    			MOVLW	18
$030C	$26E9	    			ADDWF	FSR0L, F, 0
$030E	$EC04	F000			CALL	_Delay_1us
$0312	$EC1B	F000			CALL	SoftI2C_PutZerosToLAT
$0316	$96EF	    			BCF	INDF0, ____scli2c, 0
$0318	$EC04	F000			CALL	_Delay_1us
$031C	$EC1B	F000			CALL	SoftI2C_PutZerosToLAT
$0320	$98EF	    			BCF	INDF0, ____sdai2c, 0
$0322	$C03C	F000			MOVFF	Soft_I2C_Read_result_L0, STACK_0
$0326	$0012	    			RETURN
$0328	$	_Soft_I2C_Stop:
$0328	$C015	FFE9			MOVFF	___porti2c, FSR0L
$032C	$0E0F	    			MOVLW	15
$032E	$6EEA	    			MOVWF	FSR0H, 0
$0330	$EC1B	F000			CALL	SoftI2C_PutZerosToLAT
$0334	$98EF	    			BCF	INDF0, ____sdai2c, 0
$0336	$EC04	F000			CALL	_Delay_1us
$033A	$86EF	    			BSF	INDF0, ____scli2c, 0
$033C	$0E12	    			MOVLW	18
$033E	$5EE9	    			SUBWF	FSR0L, F, 0
$0340	$A6EF	    			BTFSS	INDF0, ____scli2c, 0
$0342	$EFA0	F001			GOTO	$-1
$0346	$0E12	    			MOVLW	18
$0348	$26E9	    			ADDWF	FSR0L, F, 0
$034A	$EC04	F000			CALL	_Delay_1us
$034E	$EC04	F000			CALL	_Delay_1us
$0352	$EC04	F000			CALL	_Delay_1us
$0356	$EC04	F000			CALL	_Delay_1us
$035A	$88EF	    			BSF	INDF0, ____sdai2c, 0
$035C	$EC04	F000			CALL	_Delay_1us
$0360	$0012	    			RETURN
$0362	$	_Lcd8_Chr:
$0362	$D00F	    			BRA	L_Lcd8_Chr_5
$0364	$	L_Lcd8_Chr_7:
$0364	$0E80	    			MOVLW	128
$0366	$6E3B	    			MOVWF	FARG_Lcd8_Chr+0, 0
$0368	$D019	    			BRA	L_Lcd8_Chr_6
$036A	$	L_Lcd8_Chr_8:
$036A	$0EC0	    			MOVLW	192
$036C	$6E3B	    			MOVWF	FARG_Lcd8_Chr+0, 0
$036E	$D016	    			BRA	L_Lcd8_Chr_6
$0370	$	L_Lcd8_Chr_9:
$0370	$0E94	    			MOVLW	148
$0372	$6E3B	    			MOVWF	FARG_Lcd8_Chr+0, 0
$0374	$D013	    			BRA	L_Lcd8_Chr_6
$0376	$	L_Lcd8_Chr_10:
$0376	$0ED4	    			MOVLW	212
$0378	$6E3B	    			MOVWF	FARG_Lcd8_Chr+0, 0
$037A	$D010	    			BRA	L_Lcd8_Chr_6
$037C	$	L_Lcd8_Chr_11:
$037C	$0E80	    			MOVLW	128
$037E	$6E3B	    			MOVWF	FARG_Lcd8_Chr+0, 0
$0380	$D00D	    			BRA	L_Lcd8_Chr_6
$0382	$	L_Lcd8_Chr_5:
$0382	$503B	    			MOVF	FARG_Lcd8_Chr+0, 0, 0
$0384	$0A01	    			XORLW	1
$0386	$E0EE	    			BZ	L_Lcd8_Chr_7
$0388	$503B	    			MOVF	FARG_Lcd8_Chr+0, 0, 0
$038A	$0A02	    			XORLW	2
$038C	$E0EE	    			BZ	L_Lcd8_Chr_8
$038E	$503B	    			MOVF	FARG_Lcd8_Chr+0, 0, 0
$0390	$0A03	    			XORLW	3
$0392	$E0EE	    			BZ	L_Lcd8_Chr_9
$0394	$503B	    			MOVF	FARG_Lcd8_Chr+0, 0, 0
$0396	$0A04	    			XORLW	4
$0398	$E0EE	    			BZ	L_Lcd8_Chr_10
$039A	$D7F0	    			BRA	L_Lcd8_Chr_11
$039C	$	L_Lcd8_Chr_6:
$039C	$043C	    			DECF	FARG_Lcd8_Chr+1, 0, 0
$039E	$6E00	    			MOVWF	STACK_0, 0
$03A0	$503B	    			MOVF	FARG_Lcd8_Chr+0, 0, 0
$03A2	$2600	    			ADDWF	STACK_0, 1, 0
$03A4	$C000	F03B			MOVFF	STACK_0, FARG_Lcd8_Chr+0
$03A8	$0E01	    			MOVLW	1
$03AA	$6E1A	    			MOVWF	Lcd8bit_main_global_cmd, 0
$03AC	$C000	F041			MOVFF	STACK_0, FARG_Lcd8_Cmd+0
$03B0	$EC23	F000			CALL	_Lcd8_Cmd
$03B4	$6A1A	    			CLRF	Lcd8bit_main_global_cmd, 0
$03B6	$C03D	F041			MOVFF	FARG_Lcd8_Chr+2, FARG_Lcd8_Cmd+0
$03BA	$EC23	F000			CALL	_Lcd8_Cmd
$03BE	$0E01	    			MOVLW	1
$03C0	$6E1A	    			MOVWF	Lcd8bit_main_global_cmd, 0
$03C2	$0012	    			RETURN
$03C4	$	_LCD8_Out:
$03C4	$D00F	    			BRA	L_LCD8_Out_12
$03C6	$	L_LCD8_Out_14:
$03C6	$0E80	    			MOVLW	128
$03C8	$6E3B	    			MOVWF	FARG_LCD8_Out+0, 0
$03CA	$D019	    			BRA	L_LCD8_Out_13
$03CC	$	L_LCD8_Out_15:
$03CC	$0EC0	    			MOVLW	192
$03CE	$6E3B	    			MOVWF	FARG_LCD8_Out+0, 0
$03D0	$D016	    			BRA	L_LCD8_Out_13
$03D2	$	L_LCD8_Out_16:
$03D2	$0E94	    			MOVLW	148
$03D4	$6E3B	    			MOVWF	FARG_LCD8_Out+0, 0
$03D6	$D013	    			BRA	L_LCD8_Out_13
$03D8	$	L_LCD8_Out_17:
$03D8	$0ED4	    			MOVLW	212
$03DA	$6E3B	    			MOVWF	FARG_LCD8_Out+0, 0
$03DC	$D010	    			BRA	L_LCD8_Out_13
$03DE	$	L_LCD8_Out_18:
$03DE	$0E80	    			MOVLW	128
$03E0	$6E3B	    			MOVWF	FARG_LCD8_Out+0, 0
$03E2	$D00D	    			BRA	L_LCD8_Out_13
$03E4	$	L_LCD8_Out_12:
$03E4	$503B	    			MOVF	FARG_LCD8_Out+0, 0, 0
$03E6	$0A01	    			XORLW	1
$03E8	$E0EE	    			BZ	L_LCD8_Out_14
$03EA	$503B	    			MOVF	FARG_LCD8_Out+0, 0, 0
$03EC	$0A02	    			XORLW	2
$03EE	$E0EE	    			BZ	L_LCD8_Out_15
$03F0	$503B	    			MOVF	FARG_LCD8_Out+0, 0, 0
$03F2	$0A03	    			XORLW	3
$03F4	$E0EE	    			BZ	L_LCD8_Out_16
$03F6	$503B	    			MOVF	FARG_LCD8_Out+0, 0, 0
$03F8	$0A04	    			XORLW	4
$03FA	$E0EE	    			BZ	L_LCD8_Out_17
$03FC	$D7F0	    			BRA	L_LCD8_Out_18
$03FE	$	L_LCD8_Out_13:
$03FE	$043C	    			DECF	FARG_LCD8_Out+1, 0, 0
$0400	$6E00	    			MOVWF	STACK_0, 0
$0402	$503B	    			MOVF	FARG_LCD8_Out+0, 0, 0
$0404	$2600	    			ADDWF	STACK_0, 1, 0
$0406	$C000	F03B			MOVFF	STACK_0, FARG_LCD8_Out+0
$040A	$0E01	    			MOVLW	1
$040C	$6E1A	    			MOVWF	Lcd8bit_main_global_cmd, 0
$040E	$C000	F041			MOVFF	STACK_0, FARG_Lcd8_Cmd+0
$0412	$EC23	F000			CALL	_Lcd8_Cmd
$0416	$6A1A	    			CLRF	Lcd8bit_main_global_cmd, 0
$0418	$6A3F	    			CLRF	LCD8_Out_i_L0, 0
$041A	$	L_LCD8_Out_19:
$041A	$503F	    			MOVF	LCD8_Out_i_L0, 0, 0
$041C	$243D	    			ADDWF	FARG_LCD8_Out+2, 0, 0
$041E	$6EE9	    			MOVWF	FSR0L, 0
$0420	$0E00	    			MOVLW	0
$0422	$203E	    			ADDWFC	FARG_LCD8_Out+3, 0, 0
$0424	$6EEA	    			MOVWF	FSR0L+1, 0
$0426	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$042A	$5200	    			MOVF	STACK_0, 1, 0
$042C	$E00C	    			BZ	L_LCD8_Out_20
$042E	$503F	    			MOVF	LCD8_Out_i_L0, 0, 0
$0430	$243D	    			ADDWF	FARG_LCD8_Out+2, 0, 0
$0432	$6EE9	    			MOVWF	FSR0L, 0
$0434	$0E00	    			MOVLW	0
$0436	$203E	    			ADDWFC	FARG_LCD8_Out+3, 0, 0
$0438	$6EEA	    			MOVWF	FSR0L+1, 0
$043A	$CFEE	F041			MOVFF	POSTINC0, FARG_Lcd8_Cmd+0
$043E	$EC23	F000			CALL	_Lcd8_Cmd
$0442	$2A3F	    			INCF	LCD8_Out_i_L0, 1, 0
$0444	$D7EA	    			BRA	L_LCD8_Out_19
$0446	$	L_LCD8_Out_20:
$0446	$0E01	    			MOVLW	1
$0448	$6E1A	    			MOVWF	Lcd8bit_main_global_cmd, 0
$044A	$0012	    			RETURN
$044C	$	_Soft_I2C_Init:
$044C	$C03B	FFE9			MOVFF	FARG_Soft_I2C_Init+0, FSR0L
$0450	$C03C	FFEA			MOVFF	FARG_Soft_I2C_Init+1, FSR0H
$0454	$0E12	    			MOVLW	18
$0456	$243B	    			ADDWF	FARG_Soft_I2C_Init+0, 0, 0
$0458	$6E00	    			MOVWF	STACK_0, 0
$045A	$C000	F015			MOVFF	STACK_0, ___porti2c
$045E	$C000	FFE9			MOVFF	STACK_0, FSR0L
$0462	$88EF	    			BSF	INDF0, ____sdai2c, 0
$0464	$86EF	    			BSF	INDF0, ____scli2c, 0
$0466	$0E12	    			MOVLW	18
$0468	$5EE9	    			SUBWF	FSR0L, 1, 0
$046A	$A6EF	    			BTFSS	INDF0, ____scli2c, 0
$046C	$EF35	F002			GOTO	$-1
$0470	$0012	    			RETURN
$0472	$	_Lcd8_Init:
$0472	$EC07	F000			CALL	_Delay_5500us
$0476	$EC07	F000			CALL	_Delay_5500us
$047A	$EC07	F000			CALL	_Delay_5500us
$047E	$C03D	F016			MOVFF	FARG_Lcd8_Init+2, Lcd8bit_main_global_dataAddress
$0482	$C03E	F017			MOVFF	FARG_Lcd8_Init+3, Lcd8bit_main_global_dataAddress+1
$0486	$C03B	F018			MOVFF	FARG_Lcd8_Init+0, Lcd8bit_main_global_ctrlAddress
$048A	$C03C	F019			MOVFF	FARG_Lcd8_Init+1, Lcd8bit_main_global_ctrlAddress+1
$048E	$C03B	FFE9			MOVFF	FARG_Lcd8_Init+0, FSR0L
$0492	$C03C	FFEA			MOVFF	FARG_Lcd8_Init+1, FSR0H
$0496	$90EF	    			BCF	INDF0, __LCD8_RW, 0
$0498	$C03D	FFE1			MOVFF	FARG_Lcd8_Init+2, FSR1L
$049C	$C03E	FFE2			MOVFF	FARG_Lcd8_Init+3, FSR1H
$04A0	$6AE6	    			CLRF	POSTINC1, 0
$04A2	$0E11	    			MOVLW	17
$04A4	$24E1	    			ADDWF	FSR1L, 0, 0
$04A6	$6E00	    			MOVWF	STACK_0, 0
$04A8	$C000	FFE1			MOVFF	STACK_0, FSR1L
$04AC	$6AE7	    			CLRF	INDF1, 0
$04AE	$0E12	    			MOVLW	18
$04B0	$5C00	    			SUBWF	STACK_0, 0, 0
$04B2	$6EE1	    			MOVWF	FSR1L, 0
$04B4	$0E12	    			MOVLW	18
$04B6	$26E9	    			ADDWF	FSR0L, 1, 0
$04B8	$92EF	    			BCF	INDF0, __LCD8_ENABLE, 0
$04BA	$94EF	    			BCF	INDF0, __LCD8_RS, 0
$04BC	$90EF	    			BCF	INDF0, __LCD8_RW, 0
$04BE	$0E12	    			MOVLW	18
$04C0	$5EE9	    			SUBWF	FSR0L, 1, 0
$04C2	$94EF	    			BCF	INDF0, __LCD8_RS, 0
$04C4	$92EF	    			BCF	INDF0, __LCD8_ENABLE, 0
$04C6	$90EF	    			BCF	INDF0, __LCD8_RW, 0
$04C8	$0E30	    			MOVLW	48
$04CA	$6E41	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$04CC	$EC23	F000			CALL	_Lcd8_Cmd
$04D0	$0E30	    			MOVLW	48
$04D2	$6E41	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$04D4	$EC23	F000			CALL	_Lcd8_Cmd
$04D8	$0E30	    			MOVLW	48
$04DA	$6E41	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$04DC	$EC23	F000			CALL	_Lcd8_Cmd
$04E0	$0E38	    			MOVLW	56
$04E2	$6E41	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$04E4	$EC23	F000			CALL	_Lcd8_Cmd
$04E8	$0E08	    			MOVLW	8
$04EA	$6E41	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$04EC	$EC23	F000			CALL	_Lcd8_Cmd
$04F0	$0E01	    			MOVLW	1
$04F2	$6E41	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$04F4	$EC23	F000			CALL	_Lcd8_Cmd
$04F8	$0E06	    			MOVLW	6
$04FA	$6E41	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$04FC	$EC23	F000			CALL	_Lcd8_Cmd
$0500	$0E0C	    			MOVLW	12
$0502	$6E41	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$0504	$EC23	F000			CALL	_Lcd8_Cmd
$0508	$0E01	    			MOVLW	1
$050A	$6E1A	    			MOVWF	Lcd8bit_main_global_cmd, 0
$050C	$0012	    			RETURN
$050E	$	_VDelay_ms:
;Delays.c,115 :: 			void VDelay_ms(unsigned Time_ms){
;Delays.c,118 :: 			NumberOfCyc = Clock_KHz()>>2;
$050E	$0ED0	    			MOVLW	208
$0510	$6E3D	    			MOVWF	VDelay_ms_NumberOfCyc_L0, 0
$0512	$0E07	    			MOVLW	7
$0514	$6E3E	    			MOVWF	VDelay_ms_NumberOfCyc_L0+1, 0
$0516	$0E00	    			MOVLW	0
$0518	$6E3F	    			MOVWF	VDelay_ms_NumberOfCyc_L0+2, 0
$051A	$6E40	    			MOVWF	VDelay_ms_NumberOfCyc_L0+3, 0
;Delays.c,119 :: 			NumberOfCyc *= Time_ms;
$051C	$C03B	F000			MOVFF	FARG_VDelay_ms+0, STACK_0
$0520	$C03C	F001			MOVFF	FARG_VDelay_ms+1, STACK_0+1
$0524	$0E00	    			MOVLW	0
$0526	$6E02	    			MOVWF	STACK_0+2, 0
$0528	$6E03	    			MOVWF	STACK_0+3, 0
$052A	$0ED0	    			MOVLW	208
$052C	$6E04	    			MOVWF	STACK_4, 0
$052E	$0E07	    			MOVLW	7
$0530	$6E05	    			MOVWF	STACK_4+1, 0
$0532	$0E00	    			MOVLW	0
$0534	$6E06	    			MOVWF	STACK_4+2, 0
$0536	$0E00	    			MOVLW	0
$0538	$6E07	    			MOVWF	STACK_4+3, 0
$053A	$EC52	F000			CALL	_mul_32x32_u
$053E	$C000	F03D			MOVFF	STACK_0, VDelay_ms_NumberOfCyc_L0
$0542	$C001	F03E			MOVFF	STACK_0+1, VDelay_ms_NumberOfCyc_L0+1
$0546	$C002	F03F			MOVFF	STACK_0+2, VDelay_ms_NumberOfCyc_L0+2
$054A	$C003	F040			MOVFF	STACK_0+3, VDelay_ms_NumberOfCyc_L0+3
;Delays.c,120 :: 			if (NumberOfCyc < 660)
$054E	$0E00	    			MOVLW	0
$0550	$5C03	    			SUBWF	STACK_0+3, 0, 0
$0552	$E108	    			BNZ	L_VDelay_ms_5
$0554	$0E00	    			MOVLW	0
$0556	$5C02	    			SUBWF	STACK_0+2, 0, 0
$0558	$E105	    			BNZ	L_VDelay_ms_5
$055A	$0E02	    			MOVLW	2
$055C	$5C01	    			SUBWF	STACK_0+1, 0, 0
$055E	$E102	    			BNZ	L_VDelay_ms_5
$0560	$0E94	    			MOVLW	148
$0562	$5C00	    			SUBWF	STACK_0, 0, 0
$0564	$	L_VDelay_ms_5:
$0564	$0100	    			MOVLB	0
$0566	$A0D8	    			BTFSS	STATUS, C, 0
;Delays.c,121 :: 			return;
$0568	$0012	    			RETURN
$056A	$	L_VDelay_ms_2:
;Delays.c,122 :: 			NumberOfCyc -= 660;
$056A	$0100	    			MOVLB	0
$056C	$0E94	    			MOVLW	148
$056E	$6E00	    			MOVWF	STACK_0, 0
$0570	$0E02	    			MOVLW	2
$0572	$6E01	    			MOVWF	STACK_0+1, 0
$0574	$0E00	    			MOVLW	0
$0576	$6E02	    			MOVWF	STACK_0+2, 0
$0578	$6E03	    			MOVWF	STACK_0+3, 0
$057A	$C03D	F004			MOVFF	VDelay_ms_NumberOfCyc_L0, STACK_4
$057E	$C03E	F005			MOVFF	VDelay_ms_NumberOfCyc_L0+1, STACK_4+1
$0582	$C03F	F006			MOVFF	VDelay_ms_NumberOfCyc_L0+2, STACK_4+2
$0586	$C040	F007			MOVFF	VDelay_ms_NumberOfCyc_L0+3, STACK_4+3
$058A	$5000	    			MOVF	STACK_0, 0, 0
$058C	$5E04	    			SUBWF	STACK_4, 1, 0
$058E	$5001	    			MOVF	STACK_0+1, 0, 0
$0590	$5A05	    			SUBWFB	STACK_4+1, 1, 0
$0592	$5002	    			MOVF	STACK_0+2, 0, 0
$0594	$5A06	    			SUBWFB	STACK_4+2, 1, 0
$0596	$5003	    			MOVF	STACK_0+3, 0, 0
$0598	$5A07	    			SUBWFB	STACK_4+3, 1, 0
$059A	$C004	F03D			MOVFF	STACK_4, VDelay_ms_NumberOfCyc_L0
$059E	$C005	F03E			MOVFF	STACK_4+1, VDelay_ms_NumberOfCyc_L0+1
$05A2	$C006	F03F			MOVFF	STACK_4+2, VDelay_ms_NumberOfCyc_L0+2
$05A6	$C007	F040			MOVFF	STACK_4+3, VDelay_ms_NumberOfCyc_L0+3
;Delays.c,123 :: 			NumberOfCyc >>=  5;
$05AA	$0E05	    			MOVLW	5
$05AC	$6E00	    			MOVWF	STACK_0, 0
$05AE	$C004	F03D			MOVFF	STACK_4, VDelay_ms_NumberOfCyc_L0
$05B2	$C005	F03E			MOVFF	STACK_4+1, VDelay_ms_NumberOfCyc_L0+1
$05B6	$C006	F03F			MOVFF	STACK_4+2, VDelay_ms_NumberOfCyc_L0+2
$05BA	$C007	F040			MOVFF	STACK_4+3, VDelay_ms_NumberOfCyc_L0+3
$05BE	$5000	    			MOVF	STACK_0, 0, 0
$05C0	$	L_VDelay_ms_6:
$05C0	$0100	    			MOVLB	0
$05C2	$E007	    			BZ	L_VDelay_ms_7
$05C4	$3240	    			RRCF	VDelay_ms_NumberOfCyc_L0+3, 1, 0
$05C6	$323F	    			RRCF	VDelay_ms_NumberOfCyc_L0+2, 1, 0
$05C8	$323E	    			RRCF	VDelay_ms_NumberOfCyc_L0+1, 1, 0
$05CA	$323D	    			RRCF	VDelay_ms_NumberOfCyc_L0, 1, 0
$05CC	$9E40	    			BCF	VDelay_ms_NumberOfCyc_L0+3, 7, 0
$05CE	$0FFF	    			ADDLW	255
$05D0	$D7F7	    			BRA	L_VDelay_ms_6
$05D2	$	L_VDelay_ms_7:
;Delays.c,125 :: 			while (NumberOfCyc--)
$05D2	$	L_VDelay_ms_3:
$05D2	$0100	    			MOVLB	0
$05D4	$0100	    			MOVLB	0
$05D6	$C03D	F000			MOVFF	VDelay_ms_NumberOfCyc_L0, STACK_0
$05DA	$C03E	F001			MOVFF	VDelay_ms_NumberOfCyc_L0+1, STACK_0+1
$05DE	$C03F	F002			MOVFF	VDelay_ms_NumberOfCyc_L0+2, STACK_0+2
$05E2	$C040	F003			MOVFF	VDelay_ms_NumberOfCyc_L0+3, STACK_0+3
$05E6	$0E01	    			MOVLW	1
$05E8	$5E3D	    			SUBWF	VDelay_ms_NumberOfCyc_L0, 1, 0
$05EA	$0E00	    			MOVLW	0
$05EC	$5A3E	    			SUBWFB	VDelay_ms_NumberOfCyc_L0+1, 1, 0
$05EE	$5A3F	    			SUBWFB	VDelay_ms_NumberOfCyc_L0+2, 1, 0
$05F0	$5A40	    			SUBWFB	VDelay_ms_NumberOfCyc_L0+3, 1, 0
$05F2	$5000	    			MOVF	STACK_0, 0, 0
$05F4	$1001	    			IORWF	STACK_0+1, 0, 0
$05F6	$1002	    			IORWF	STACK_0+2, 0, 0
$05F8	$1003	    			IORWF	STACK_0+3, 0, 0
$05FA	$E00C	    			BZ	L_VDelay_ms_4
;Delays.c,127 :: 			asm nop;
$05FC	$0000	    			NOP
;Delays.c,128 :: 			asm nop;
$05FE	$0000	    			NOP
;Delays.c,129 :: 			asm nop;
$0600	$0000	    			NOP
;Delays.c,130 :: 			asm nop;
$0602	$0000	    			NOP
;Delays.c,131 :: 			asm nop;
$0604	$0000	    			NOP
;Delays.c,132 :: 			asm nop;
$0606	$0000	    			NOP
;Delays.c,133 :: 			asm nop;
$0608	$0000	    			NOP
;Delays.c,134 :: 			asm nop;
$060A	$0000	    			NOP
;Delays.c,135 :: 			asm nop;
$060C	$0000	    			NOP
;Delays.c,136 :: 			asm nop;
$060E	$0000	    			NOP
;Delays.c,137 :: 			asm nop;
$0610	$0000	    			NOP
;Delays.c,138 :: 			}
$0612	$D7DF	    			BRA	L_VDelay_ms_3
$0614	$	L_VDelay_ms_4:
;Delays.c,139 :: 			}
$0614	$0012	    			RETURN
$0616	$	_Adc_Read:
$0616	$6AC2	    			CLRF	ADCON0, 0
$0618	$0EC0	    			MOVLW	192
$061A	$12C2	    			IORWF	ADCON0, 1, 0
$061C	$8CC1	    			BSF	ADCON1, 6, 0
$061E	$8EC1	    			BSF	ADCON1, 7, 0
$0620	$C03B	F000			MOVFF	FARG_Adc_Read+0, STACK_0
$0624	$3600	    			RLCF	STACK_0, 1, 0
$0626	$9000	    			BCF	STACK_0, 0, 0
$0628	$3600	    			RLCF	STACK_0, 1, 0
$062A	$9000	    			BCF	STACK_0, 0, 0
$062C	$3600	    			RLCF	STACK_0, 1, 0
$062E	$9000	    			BCF	STACK_0, 0, 0
$0630	$5000	    			MOVF	STACK_0, 0, 0
$0632	$12C2	    			IORWF	ADCON0, 1, 0
$0634	$80C2	    			BSF	ADCON0, 0, 0
$0636	$EC80	F000			CALL	_Delay_22us
$063A	$84C2	    			BSF	ADCON0, 2, 0
$063C	$	L_Adc_Read_0:
$063C	$B4C2	    			BTFSC	ADCON0, 2, 0
$063E	$D7FE	    			BRA	L_Adc_Read_0
$0640	$	L_Adc_Read_1:
$0640	$0E08	    			MOVLW	8
$0642	$6E02	    			MOVWF	STACK_2, 0
$0644	$CFC4	F000			MOVFF	ADRESH, STACK_0
$0648	$0E00	    			MOVLW	0
$064A	$6E01	    			MOVWF	STACK_0+1, 0
$064C	$5002	    			MOVF	STACK_2, 0, 0
$064E	$	L_Adc_Read_2:
$064E	$E005	    			BZ	L_Adc_Read_3
$0650	$3600	    			RLCF	STACK_0, 1, 0
$0652	$9000	    			BCF	STACK_0, 0, 0
$0654	$3601	    			RLCF	STACK_0+1, 1, 0
$0656	$0FFF	    			ADDLW	255
$0658	$D7FA	    			BRA	L_Adc_Read_2
$065A	$	L_Adc_Read_3:
$065A	$50C3	    			MOVF	ADRESL, 0, 0
$065C	$1200	    			IORWF	STACK_0, 1, 0
$065E	$0E00	    			MOVLW	0
$0660	$1201	    			IORWF	STACK_0+1, 1, 0
$0662	$90C2	    			BCF	ADCON0, 0, 0
$0664	$0012	    			RETURN
$0666	$	_WordToStr:
$0666	$C03D	FFE1			MOVFF	FARG_WordToStr+2, FSR1L
$066A	$C03E	FFE2			MOVFF	FARG_WordToStr+3, FSR1H
$066E	$0E20	    			MOVLW	32
$0670	$6EE6	    			MOVWF	POSTINC1, 0
$0672	$0E01	    			MOVLW	1
$0674	$243D	    			ADDWF	FARG_WordToStr+2, 0, 0
$0676	$6EE1	    			MOVWF	FSR1L, 0
$0678	$0E00	    			MOVLW	0
$067A	$203E	    			ADDWFC	FARG_WordToStr+3, 0, 0
$067C	$6EE2	    			MOVWF	FSR1L+1, 0
$067E	$0E20	    			MOVLW	32
$0680	$6EE6	    			MOVWF	POSTINC1, 0
$0682	$0E02	    			MOVLW	2
$0684	$243D	    			ADDWF	FARG_WordToStr+2, 0, 0
$0686	$6EE1	    			MOVWF	FSR1L, 0
$0688	$0E00	    			MOVLW	0
$068A	$203E	    			ADDWFC	FARG_WordToStr+3, 0, 0
$068C	$6EE2	    			MOVWF	FSR1L+1, 0
$068E	$0E20	    			MOVLW	32
$0690	$6EE6	    			MOVWF	POSTINC1, 0
$0692	$0E03	    			MOVLW	3
$0694	$243D	    			ADDWF	FARG_WordToStr+2, 0, 0
$0696	$6EE1	    			MOVWF	FSR1L, 0
$0698	$0E00	    			MOVLW	0
$069A	$203E	    			ADDWFC	FARG_WordToStr+3, 0, 0
$069C	$6EE2	    			MOVWF	FSR1L+1, 0
$069E	$0E20	    			MOVLW	32
$06A0	$6EE6	    			MOVWF	POSTINC1, 0
$06A2	$0E04	    			MOVLW	4
$06A4	$243D	    			ADDWF	FARG_WordToStr+2, 0, 0
$06A6	$6EE1	    			MOVWF	FSR1L, 0
$06A8	$0E00	    			MOVLW	0
$06AA	$203E	    			ADDWFC	FARG_WordToStr+3, 0, 0
$06AC	$6EE2	    			MOVWF	FSR1L+1, 0
$06AE	$0E30	    			MOVLW	48
$06B0	$6EE6	    			MOVWF	POSTINC1, 0
$06B2	$0E05	    			MOVLW	5
$06B4	$243D	    			ADDWF	FARG_WordToStr+2, 0, 0
$06B6	$6EE1	    			MOVWF	FSR1L, 0
$06B8	$0E00	    			MOVLW	0
$06BA	$203E	    			ADDWFC	FARG_WordToStr+3, 0, 0
$06BC	$6EE2	    			MOVWF	FSR1L+1, 0
$06BE	$6AE6	    			CLRF	POSTINC1, 0
$06C0	$0E04	    			MOVLW	4
$06C2	$6E3F	    			MOVWF	WordToStr_pos_L0, 0
$06C4	$	L_WordToStr_4:
$06C4	$0E00	    			MOVLW	0
$06C6	$6E00	    			MOVWF	STACK_0, 0
$06C8	$503C	    			MOVF	FARG_WordToStr+1, 0, 0
$06CA	$5C00	    			SUBWF	STACK_0, 0, 0
$06CC	$E102	    			BNZ	L_WordToStr_51
$06CE	$503B	    			MOVF	FARG_WordToStr+0, 0, 0
$06D0	$0800	    			SUBLW	0
$06D2	$	L_WordToStr_51:
$06D2	$E228	    			BC	L_WordToStr_5
$06D4	$503F	    			MOVF	WordToStr_pos_L0, 0, 0
$06D6	$243D	    			ADDWF	FARG_WordToStr+2, 0, 0
$06D8	$6EE1	    			MOVWF	FSR1L, 0
$06DA	$0E00	    			MOVLW	0
$06DC	$203E	    			ADDWFC	FARG_WordToStr+3, 0, 0
$06DE	$6EE2	    			MOVWF	FSR1L+1, 0
$06E0	$0E0A	    			MOVLW	10
$06E2	$6E04	    			MOVWF	STACK_4, 0
$06E4	$0E00	    			MOVLW	0
$06E6	$6E05	    			MOVWF	STACK_4+1, 0
$06E8	$C03B	F000			MOVFF	FARG_WordToStr+0, STACK_0
$06EC	$C03C	F001			MOVFF	FARG_WordToStr+1, STACK_0+1
$06F0	$EC86	F000			CALL	_div_16x16_u
$06F4	$C008	F000			MOVFF	STACK_8, STACK_0
$06F8	$C009	F001			MOVFF	STACK_9, STACK_1
$06FC	$0E30	    			MOVLW	48
$06FE	$2600	    			ADDWF	STACK_0, 1, 0
$0700	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$0704	$0E0A	    			MOVLW	10
$0706	$6E04	    			MOVWF	STACK_4, 0
$0708	$0E00	    			MOVLW	0
$070A	$6E05	    			MOVWF	STACK_4+1, 0
$070C	$C03B	F000			MOVFF	FARG_WordToStr+0, STACK_0
$0710	$C03C	F001			MOVFF	FARG_WordToStr+1, STACK_0+1
$0714	$EC86	F000			CALL	_div_16x16_u
$0718	$C000	F03B			MOVFF	STACK_0, FARG_WordToStr+0
$071C	$C001	F03C			MOVFF	STACK_0+1, FARG_WordToStr+1
$0720	$063F	    			DECF	WordToStr_pos_L0, 1, 0
$0722	$D7D0	    			BRA	L_WordToStr_4
$0724	$	L_WordToStr_5:
$0724	$0012	    			RETURN
$0726	$	_PWM_Start:
$0726	$9494	    			BCF	TRISC, 2, 0
$0728	$84CA	    			BSF	T2CON, 2, 0
$072A	$0E0C	    			MOVLW	12
$072C	$12BD	    			IORWF	CCP1CON, 1, 0
$072E	$0012	    			RETURN
$0730	$	_PWM_Change_Duty:
$0730	$50CB	    			MOVF	PR2, 0, 0
$0732	$0F01	    			ADDLW	1
$0734	$6E00	    			MOVWF	STACK_0, 0
$0736	$6A01	    			CLRF	STACK_0+1, 0
$0738	$0E00	    			MOVLW	0
$073A	$2201	    			ADDWFC	STACK_0+1, 1, 0
$073C	$C03B	F004			MOVFF	FARG_PWM_Change_Duty+0, STACK_4
$0740	$0E00	    			MOVLW	0
$0742	$6E05	    			MOVWF	STACK_4+1, 0
$0744	$ECA4	F000			CALL	_mul_16x16_s
$0748	$0E06	    			MOVLW	6
$074A	$6E02	    			MOVWF	STACK_2, 0
$074C	$C000	F004			MOVFF	STACK_0, STACK_4
$0750	$C001	F005			MOVFF	STACK_0+1, STACK_4+1
$0754	$5002	    			MOVF	STACK_2, 0, 0
$0756	$	L_PWM_Change_Duty_4:
$0756	$0100	    			MOVLB	0
$0758	$E005	    			BZ	L_PWM_Change_Duty_5
$075A	$3205	    			RRCF	STACK_4+1, 1, 0
$075C	$3204	    			RRCF	STACK_4, 1, 0
$075E	$9E05	    			BCF	STACK_4+1, 7, 0
$0760	$0FFF	    			ADDLW	255
$0762	$D7F9	    			BRA	L_PWM_Change_Duty_4
$0764	$	L_PWM_Change_Duty_5:
$0764	$C004	F000			MOVFF	STACK_4, STACK_0
$0768	$3600	    			RLCF	STACK_0, 1, 0
$076A	$9000	    			BCF	STACK_0, 0, 0
$076C	$3600	    			RLCF	STACK_0, 1, 0
$076E	$9000	    			BCF	STACK_0, 0, 0
$0770	$3600	    			RLCF	STACK_0, 1, 0
$0772	$9000	    			BCF	STACK_0, 0, 0
$0774	$3600	    			RLCF	STACK_0, 1, 0
$0776	$9000	    			BCF	STACK_0, 0, 0
$0778	$0E30	    			MOVLW	48
$077A	$1400	    			ANDWF	STACK_0, 0, 0
$077C	$6E03	    			MOVWF	STACK_3, 0
$077E	$C004	F000			MOVFF	STACK_4, STACK_0
$0782	$C005	F001			MOVFF	STACK_4+1, STACK_0+1
$0786	$3201	    			RRCF	STACK_0+1, 1, 0
$0788	$3200	    			RRCF	STACK_0, 1, 0
$078A	$9E01	    			BCF	STACK_0+1, 7, 0
$078C	$3201	    			RRCF	STACK_0+1, 1, 0
$078E	$3200	    			RRCF	STACK_0, 1, 0
$0790	$9E01	    			BCF	STACK_0+1, 7, 0
$0792	$C000	FFBE			MOVFF	STACK_0, CCPR1L
$0796	$0E0F	    			MOVLW	15
$0798	$16BD	    			ANDWF	CCP1CON, 1, 0
$079A	$5003	    			MOVF	STACK_3, 0, 0
$079C	$12BD	    			IORWF	CCP1CON, 1, 0
$079E	$0012	    			RETURN
$07A0	$	_PWM_Init:
$07A0	$6ABE	    			CLRF	CCPR1L, 0
$07A2	$98BD	    			BCF	CCP1CON, 4, 0
$07A4	$9ABD	    			BCF	CCP1CON, 5, 0
$07A6	$0012	    			RETURN
$07A8	$	_my_read_keypad:
;ergasia_part1.c,16 :: 			char  my_read_keypad()
;ergasia_part1.c,21 :: 			PORTD = 0xFF;      //arxikopoiw ola ta podarakia tou D sto 1
$07A8	$0EFF	    			MOVLW	255
$07AA	$6E83	    			MOVWF	PORTD, 0
;ergasia_part1.c,22 :: 			TRISD = 0xFF;      //kanw to portD ws eisodo
$07AC	$0EFF	    			MOVLW	255
$07AE	$6E95	    			MOVWF	TRISD, 0
;ergasia_part1.c,24 :: 			TRISB = 0x00;     //kanw to portB ws eisodo
$07B0	$6A93	    			CLRF	TRISB, 0
;ergasia_part1.c,25 :: 			PORTB = 0xFF;     //arxikopoiw ola ta podarakia tou B sto 1
$07B2	$0EFF	    			MOVLW	255
$07B4	$6E81	    			MOVWF	PORTB, 0
;ergasia_part1.c,27 :: 			key =0;
$07B6	$6A1F	    			CLRF	my_read_keypad_key_L0, 0
;ergasia_part1.c,29 :: 			do {    //scan continuously until a key is pressed on the keypad.
$07B8	$	L_my_read_keypad_0:
;ergasia_part1.c,32 :: 			PORTB.F0 = 0;
$07B8	$9081	    			BCF	PORTB, 0, 0
;ergasia_part1.c,33 :: 			delay_ms(1);
$07BA	$0E03	    			MOVLW	3
$07BC	$6E0B	    			MOVWF	STACK_11, 0
$07BE	$0EFF	    			MOVLW	255
$07C0	$6E0A	    			MOVWF	STACK_10, 0
$07C2	$2E0B	    			DECFSZ	STACK_11, F, 0
$07C4	$D001	    			BRA	$+2
$07C6	$D003	    			BRA	$+4
$07C8	$2E0A	    			DECFSZ	STACK_10, F, 0
$07CA	$D7FE	    			BRA	$-1
$07CC	$D7FA	    			BRA	$-5
$07CE	$0E96	    			MOVLW	150
$07D0	$6E0A	    			MOVWF	STACK_10, 0
$07D2	$2E0A	    			DECFSZ	STACK_10, F, 0
$07D4	$D7FE	    			BRA	$-1
;ergasia_part1.c,34 :: 			var = PORTD;
$07D6	$CF83	F01E			MOVFF	PORTD, my_read_keypad_var_L0
;ergasia_part1.c,35 :: 			if (var.F0 == 0)      key = '<';
$07DA	$0E01	    			MOVLW	1
$07DC	$141E	    			ANDWF	my_read_keypad_var_L0, 0, 0
$07DE	$6E01	    			MOVWF	STACK_1, 0
$07E0	$5001	    			MOVF	STACK_1, 0, 0
$07E2	$0A00	    			XORLW	0
$07E4	$E103	    			BNZ	L_my_read_keypad_2
$07E6	$0E3C	    			MOVLW	60
$07E8	$6E1F	    			MOVWF	my_read_keypad_key_L0, 0
$07EA	$D01A	    			BRA	L_my_read_keypad_3
$07EC	$	L_my_read_keypad_2:
;ergasia_part1.c,36 :: 			else if (var.F1 == 0) key = '7';
$07EC	$6A01	    			CLRF	STACK_1, 0
$07EE	$B21E	    			BTFSC	my_read_keypad_var_L0, 1, 0
$07F0	$2A01	    			INCF	STACK_1, 1, 0
$07F2	$5001	    			MOVF	STACK_1, 0, 0
$07F4	$0A00	    			XORLW	0
$07F6	$E103	    			BNZ	L_my_read_keypad_4
$07F8	$0E37	    			MOVLW	55
$07FA	$6E1F	    			MOVWF	my_read_keypad_key_L0, 0
$07FC	$D011	    			BRA	L_my_read_keypad_5
$07FE	$	L_my_read_keypad_4:
;ergasia_part1.c,37 :: 			else if (var.F2 == 0) key = '4';
$07FE	$6A01	    			CLRF	STACK_1, 0
$0800	$B41E	    			BTFSC	my_read_keypad_var_L0, 2, 0
$0802	$2A01	    			INCF	STACK_1, 1, 0
$0804	$5001	    			MOVF	STACK_1, 0, 0
$0806	$0A00	    			XORLW	0
$0808	$E103	    			BNZ	L_my_read_keypad_6
$080A	$0E34	    			MOVLW	52
$080C	$6E1F	    			MOVWF	my_read_keypad_key_L0, 0
$080E	$D008	    			BRA	L_my_read_keypad_7
$0810	$	L_my_read_keypad_6:
;ergasia_part1.c,38 :: 			else if (var.F3 == 0) key = '1';
$0810	$6A01	    			CLRF	STACK_1, 0
$0812	$B61E	    			BTFSC	my_read_keypad_var_L0, 3, 0
$0814	$2A01	    			INCF	STACK_1, 1, 0
$0816	$5001	    			MOVF	STACK_1, 0, 0
$0818	$0A00	    			XORLW	0
$081A	$E102	    			BNZ	L_my_read_keypad_8
$081C	$0E31	    			MOVLW	49
$081E	$6E1F	    			MOVWF	my_read_keypad_key_L0, 0
$0820	$	L_my_read_keypad_8:
$0820	$	L_my_read_keypad_7:
$0820	$	L_my_read_keypad_5:
$0820	$	L_my_read_keypad_3:
;ergasia_part1.c,39 :: 			PORTB.F0 =1;    //restore RB0 to 1.
$0820	$8081	    			BSF	PORTB, 0, 0
;ergasia_part1.c,42 :: 			PORTB.F1 = 0;
$0822	$9281	    			BCF	PORTB, 1, 0
;ergasia_part1.c,43 :: 			delay_ms(1);
$0824	$0E03	    			MOVLW	3
$0826	$6E0B	    			MOVWF	STACK_11, 0
$0828	$0EFF	    			MOVLW	255
$082A	$6E0A	    			MOVWF	STACK_10, 0
$082C	$2E0B	    			DECFSZ	STACK_11, F, 0
$082E	$D001	    			BRA	$+2
$0830	$D003	    			BRA	$+4
$0832	$2E0A	    			DECFSZ	STACK_10, F, 0
$0834	$D7FE	    			BRA	$-1
$0836	$D7FA	    			BRA	$-5
$0838	$0E96	    			MOVLW	150
$083A	$6E0A	    			MOVWF	STACK_10, 0
$083C	$2E0A	    			DECFSZ	STACK_10, F, 0
$083E	$D7FE	    			BRA	$-1
;ergasia_part1.c,44 :: 			var = PORTD;
$0840	$CF83	F01E			MOVFF	PORTD, my_read_keypad_var_L0
;ergasia_part1.c,45 :: 			if (var.F0 == 0)      key = '0';
$0844	$0E01	    			MOVLW	1
$0846	$141E	    			ANDWF	my_read_keypad_var_L0, 0, 0
$0848	$6E01	    			MOVWF	STACK_1, 0
$084A	$5001	    			MOVF	STACK_1, 0, 0
$084C	$0A00	    			XORLW	0
$084E	$E103	    			BNZ	L_my_read_keypad_9
$0850	$0E30	    			MOVLW	48
$0852	$6E1F	    			MOVWF	my_read_keypad_key_L0, 0
$0854	$D01A	    			BRA	L_my_read_keypad_10
$0856	$	L_my_read_keypad_9:
;ergasia_part1.c,46 :: 			else if (var.F1 == 0) key = '8';
$0856	$6A01	    			CLRF	STACK_1, 0
$0858	$B21E	    			BTFSC	my_read_keypad_var_L0, 1, 0
$085A	$2A01	    			INCF	STACK_1, 1, 0
$085C	$5001	    			MOVF	STACK_1, 0, 0
$085E	$0A00	    			XORLW	0
$0860	$E103	    			BNZ	L_my_read_keypad_11
$0862	$0E38	    			MOVLW	56
$0864	$6E1F	    			MOVWF	my_read_keypad_key_L0, 0
$0866	$D011	    			BRA	L_my_read_keypad_12
$0868	$	L_my_read_keypad_11:
;ergasia_part1.c,47 :: 			else if (var.F2 == 0) key = '5';
$0868	$6A01	    			CLRF	STACK_1, 0
$086A	$B41E	    			BTFSC	my_read_keypad_var_L0, 2, 0
$086C	$2A01	    			INCF	STACK_1, 1, 0
$086E	$5001	    			MOVF	STACK_1, 0, 0
$0870	$0A00	    			XORLW	0
$0872	$E103	    			BNZ	L_my_read_keypad_13
$0874	$0E35	    			MOVLW	53
$0876	$6E1F	    			MOVWF	my_read_keypad_key_L0, 0
$0878	$D008	    			BRA	L_my_read_keypad_14
$087A	$	L_my_read_keypad_13:
;ergasia_part1.c,48 :: 			else if (var.F3 == 0) key = '2';
$087A	$6A01	    			CLRF	STACK_1, 0
$087C	$B61E	    			BTFSC	my_read_keypad_var_L0, 3, 0
$087E	$2A01	    			INCF	STACK_1, 1, 0
$0880	$5001	    			MOVF	STACK_1, 0, 0
$0882	$0A00	    			XORLW	0
$0884	$E102	    			BNZ	L_my_read_keypad_15
$0886	$0E32	    			MOVLW	50
$0888	$6E1F	    			MOVWF	my_read_keypad_key_L0, 0
$088A	$	L_my_read_keypad_15:
$088A	$	L_my_read_keypad_14:
$088A	$	L_my_read_keypad_12:
$088A	$	L_my_read_keypad_10:
;ergasia_part1.c,49 :: 			PORTB.F1 =1;   //restore RB1 to 1
$088A	$8281	    			BSF	PORTB, 1, 0
;ergasia_part1.c,52 :: 			PORTB.F2 =0;
$088C	$9481	    			BCF	PORTB, 2, 0
;ergasia_part1.c,53 :: 			delay_ms(1);
$088E	$0E03	    			MOVLW	3
$0890	$6E0B	    			MOVWF	STACK_11, 0
$0892	$0EFF	    			MOVLW	255
$0894	$6E0A	    			MOVWF	STACK_10, 0
$0896	$2E0B	    			DECFSZ	STACK_11, F, 0
$0898	$D001	    			BRA	$+2
$089A	$D003	    			BRA	$+4
$089C	$2E0A	    			DECFSZ	STACK_10, F, 0
$089E	$D7FE	    			BRA	$-1
$08A0	$D7FA	    			BRA	$-5
$08A2	$0E96	    			MOVLW	150
$08A4	$6E0A	    			MOVWF	STACK_10, 0
$08A6	$2E0A	    			DECFSZ	STACK_10, F, 0
$08A8	$D7FE	    			BRA	$-1
;ergasia_part1.c,54 :: 			var = PORTD;
$08AA	$CF83	F01E			MOVFF	PORTD, my_read_keypad_var_L0
;ergasia_part1.c,55 :: 			if (var.F0 == 0)      key = '>';
$08AE	$0E01	    			MOVLW	1
$08B0	$141E	    			ANDWF	my_read_keypad_var_L0, 0, 0
$08B2	$6E01	    			MOVWF	STACK_1, 0
$08B4	$5001	    			MOVF	STACK_1, 0, 0
$08B6	$0A00	    			XORLW	0
$08B8	$E103	    			BNZ	L_my_read_keypad_16
$08BA	$0E3E	    			MOVLW	62
$08BC	$6E1F	    			MOVWF	my_read_keypad_key_L0, 0
$08BE	$D01A	    			BRA	L_my_read_keypad_17
$08C0	$	L_my_read_keypad_16:
;ergasia_part1.c,56 :: 			else if (var.F1 == 0) key = '9';
$08C0	$6A01	    			CLRF	STACK_1, 0
$08C2	$B21E	    			BTFSC	my_read_keypad_var_L0, 1, 0
$08C4	$2A01	    			INCF	STACK_1, 1, 0
$08C6	$5001	    			MOVF	STACK_1, 0, 0
$08C8	$0A00	    			XORLW	0
$08CA	$E103	    			BNZ	L_my_read_keypad_18
$08CC	$0E39	    			MOVLW	57
$08CE	$6E1F	    			MOVWF	my_read_keypad_key_L0, 0
$08D0	$D011	    			BRA	L_my_read_keypad_19
$08D2	$	L_my_read_keypad_18:
;ergasia_part1.c,57 :: 			else if (var.F2 == 0) key = '6';
$08D2	$6A01	    			CLRF	STACK_1, 0
$08D4	$B41E	    			BTFSC	my_read_keypad_var_L0, 2, 0
$08D6	$2A01	    			INCF	STACK_1, 1, 0
$08D8	$5001	    			MOVF	STACK_1, 0, 0
$08DA	$0A00	    			XORLW	0
$08DC	$E103	    			BNZ	L_my_read_keypad_20
$08DE	$0E36	    			MOVLW	54
$08E0	$6E1F	    			MOVWF	my_read_keypad_key_L0, 0
$08E2	$D008	    			BRA	L_my_read_keypad_21
$08E4	$	L_my_read_keypad_20:
;ergasia_part1.c,58 :: 			else if (var.F3 == 0) key = '3';
$08E4	$6A01	    			CLRF	STACK_1, 0
$08E6	$B61E	    			BTFSC	my_read_keypad_var_L0, 3, 0
$08E8	$2A01	    			INCF	STACK_1, 1, 0
$08EA	$5001	    			MOVF	STACK_1, 0, 0
$08EC	$0A00	    			XORLW	0
$08EE	$E102	    			BNZ	L_my_read_keypad_22
$08F0	$0E33	    			MOVLW	51
$08F2	$6E1F	    			MOVWF	my_read_keypad_key_L0, 0
$08F4	$	L_my_read_keypad_22:
$08F4	$	L_my_read_keypad_21:
$08F4	$	L_my_read_keypad_19:
$08F4	$	L_my_read_keypad_17:
;ergasia_part1.c,59 :: 			PORTB.F2 =1;  //restore RB2 to 1
$08F4	$8481	    			BSF	PORTB, 2, 0
;ergasia_part1.c,60 :: 			}while (key == 0);
$08F6	$501F	    			MOVF	my_read_keypad_key_L0, 0, 0
$08F8	$0A00	    			XORLW	0
$08FA	$B4D8	    			BTFSC	STATUS, Z, 0
$08FC	$D75D	    			BRA	L_my_read_keypad_0
$08FE	$	L_my_read_keypad_1:
;ergasia_part1.c,61 :: 			return key;
$08FE	$C01F	F000			MOVFF	my_read_keypad_key_L0, STACK_0
;ergasia_part1.c,62 :: 			}
$0902	$0012	    			RETURN
$0904	$	_date_Time:
$0904	$0E3A	    			MOVLW	58
$0906	$6E1E	    			MOVWF	lstr1_ergasia_part1+0, 0
$0908	$6A1F	    			CLRF	lstr1_ergasia_part1+1, 0
$090A	$0E3A	    			MOVLW	58
$090C	$6E20	    			MOVWF	lstr2_ergasia_part1+0, 0
$090E	$6A21	    			CLRF	lstr2_ergasia_part1+1, 0
$0910	$0E2F	    			MOVLW	47
$0912	$6E22	    			MOVWF	lstr3_ergasia_part1+0, 0
$0914	$6A23	    			CLRF	lstr3_ergasia_part1+1, 0
$0916	$0E2F	    			MOVLW	47
$0918	$6E24	    			MOVWF	lstr4_ergasia_part1+0, 0
$091A	$6A25	    			CLRF	lstr4_ergasia_part1+1, 0
;ergasia_part1.c,65 :: 			void date_Time(){
;ergasia_part1.c,73 :: 			Soft_I2C_Config(&PORTC,4,3);           //arxikopoiw
$091C	$0E82	    			MOVLW	PORTC
$091E	$6E3B	    			MOVWF	FARG_Soft_I2C_Init+0, 0
$0920	$0E0F	    			MOVLW	@PORTC
$0922	$6E3C	    			MOVWF	FARG_Soft_I2C_Init+1, 0
$0924	$EC26	F002			CALL	_Soft_I2C_Init
;ergasia_part1.c,74 :: 			Soft_I2C_Start();
$0928	$ECD8	F000			CALL	_Soft_I2C_Start
;ergasia_part1.c,75 :: 			Soft_I2C_Write(0xD0);                  //stelnw tin dieuthinsh ths EEPROM+W
$092C	$0ED0	    			MOVLW	208
$092E	$6E3B	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$0930	$ECEB	F000			CALL	_Soft_I2C_Write
;ergasia_part1.c,76 :: 			Soft_I2C_Write(0);                     //thesi mnhmhs pou thelw na diavasw ((0)ta seconds diladi)
$0934	$6A3B	    			CLRF	FARG_Soft_I2C_Write+0, 0
$0936	$ECEB	F000			CALL	_Soft_I2C_Write
;ergasia_part1.c,78 :: 			Soft_I2C_Start();                      //Issue I2C start signal
$093A	$ECD8	F000			CALL	_Soft_I2C_Start
;ergasia_part1.c,79 :: 			Soft_I2C_Write(0xD1);                  //Send byte(device address +R)
$093E	$0ED1	    			MOVLW	209
$0940	$6E3B	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$0942	$ECEB	F000			CALL	_Soft_I2C_Write
;ergasia_part1.c,80 :: 			temp=Soft_I2C_Read(0);                 //Read data (NO ACK)  thesi mnimis 0
$0946	$6A3B	    			CLRF	FARG_Soft_I2C_Read+0, 0
$0948	$EC4B	F001			CALL	_Soft_I2C_Read
$094C	$C000	F034			MOVFF	STACK_0, date_Time_temp_L0
;ergasia_part1.c,81 :: 			temp1=Soft_I2C_Read(0);                //diavazw thesi mnimis 1
$0950	$6A3B	    			CLRF	FARG_Soft_I2C_Read+0, 0
$0952	$EC4B	F001			CALL	_Soft_I2C_Read
$0956	$C000	F035			MOVFF	STACK_0, date_Time_temp1_L0
;ergasia_part1.c,82 :: 			temp2=Soft_I2C_Read(0);                //diavazw thesi mnimis 2
$095A	$6A3B	    			CLRF	FARG_Soft_I2C_Read+0, 0
$095C	$EC4B	F001			CALL	_Soft_I2C_Read
$0960	$C000	F036			MOVFF	STACK_0, date_Time_temp2_L0
;ergasia_part1.c,83 :: 			temp3=Soft_I2C_Read(0);                //diavazw thesi mnimis 3
$0964	$6A3B	    			CLRF	FARG_Soft_I2C_Read+0, 0
$0966	$EC4B	F001			CALL	_Soft_I2C_Read
$096A	$C000	F037			MOVFF	STACK_0, date_Time_temp3_L0
;ergasia_part1.c,84 :: 			temp4=Soft_I2C_Read(0);                //diavazw thesi mnimis 4
$096E	$6A3B	    			CLRF	FARG_Soft_I2C_Read+0, 0
$0970	$EC4B	F001			CALL	_Soft_I2C_Read
$0974	$C000	F038			MOVFF	STACK_0, date_Time_temp4_L0
;ergasia_part1.c,85 :: 			temp5=Soft_I2C_Read(0);                //diavazw thesi mnimis 5
$0978	$6A3B	    			CLRF	FARG_Soft_I2C_Read+0, 0
$097A	$EC4B	F001			CALL	_Soft_I2C_Read
$097E	$C000	F039			MOVFF	STACK_0, date_Time_temp5_L0
;ergasia_part1.c,86 :: 			temp6=Soft_I2C_Read(0);                //diavazw thesi mnimis 6
$0982	$6A3B	    			CLRF	FARG_Soft_I2C_Read+0, 0
$0984	$EC4B	F001			CALL	_Soft_I2C_Read
$0988	$C000	F03A			MOVFF	STACK_0, date_Time_temp6_L0
;ergasia_part1.c,87 :: 			Soft_I2C_Stop();
$098C	$EC94	F001			CALL	_Soft_I2C_Stop
;ergasia_part1.c,90 :: 			seconds[0]=((temp& 0X70)>>4)+0x30;      //olisthisi gia na einai stoixismena kai ta kanw +0x30 kai to metatrepw se ascii
$0990	$0E70	    			MOVLW	112
$0992	$1434	    			ANDWF	date_Time_temp_L0, 0, 0
$0994	$6E28	    			MOVWF	date_Time_seconds_L0, 0
$0996	$3228	    			RRCF	date_Time_seconds_L0, 1, 0
$0998	$9E28	    			BCF	date_Time_seconds_L0, 7, 0
$099A	$3228	    			RRCF	date_Time_seconds_L0, 1, 0
$099C	$9E28	    			BCF	date_Time_seconds_L0, 7, 0
$099E	$3228	    			RRCF	date_Time_seconds_L0, 1, 0
$09A0	$9E28	    			BCF	date_Time_seconds_L0, 7, 0
$09A2	$3228	    			RRCF	date_Time_seconds_L0, 1, 0
$09A4	$9E28	    			BCF	date_Time_seconds_L0, 7, 0
$09A6	$0E30	    			MOVLW	48
$09A8	$2628	    			ADDWF	date_Time_seconds_L0, 1, 0
;ergasia_part1.c,91 :: 			seconds[1]=(temp & 0x0F) + 0x30;
$09AA	$0E0F	    			MOVLW	15
$09AC	$1434	    			ANDWF	date_Time_temp_L0, 0, 0
$09AE	$6E29	    			MOVWF	date_Time_seconds_L0+1, 0
$09B0	$0E30	    			MOVLW	48
$09B2	$2629	    			ADDWF	date_Time_seconds_L0+1, 1, 0
;ergasia_part1.c,95 :: 			minutes[0]=((temp1 & 0X70)>>4)+0x30;
$09B4	$0E70	    			MOVLW	112
$09B6	$1435	    			ANDWF	date_Time_temp1_L0, 0, 0
$09B8	$6E26	    			MOVWF	date_Time_minutes_L0, 0
$09BA	$3226	    			RRCF	date_Time_minutes_L0, 1, 0
$09BC	$9E26	    			BCF	date_Time_minutes_L0, 7, 0
$09BE	$3226	    			RRCF	date_Time_minutes_L0, 1, 0
$09C0	$9E26	    			BCF	date_Time_minutes_L0, 7, 0
$09C2	$3226	    			RRCF	date_Time_minutes_L0, 1, 0
$09C4	$9E26	    			BCF	date_Time_minutes_L0, 7, 0
$09C6	$3226	    			RRCF	date_Time_minutes_L0, 1, 0
$09C8	$9E26	    			BCF	date_Time_minutes_L0, 7, 0
$09CA	$0E30	    			MOVLW	48
$09CC	$2626	    			ADDWF	date_Time_minutes_L0, 1, 0
;ergasia_part1.c,96 :: 			minutes[1]=(temp1 & 0x0F) + 0x30;
$09CE	$0E0F	    			MOVLW	15
$09D0	$1435	    			ANDWF	date_Time_temp1_L0, 0, 0
$09D2	$6E27	    			MOVWF	date_Time_minutes_L0+1, 0
$09D4	$0E30	    			MOVLW	48
$09D6	$2627	    			ADDWF	date_Time_minutes_L0+1, 1, 0
;ergasia_part1.c,99 :: 			hours[0]=((temp2 & 0x70)>>4)+0x30;
$09D8	$0E70	    			MOVLW	112
$09DA	$1436	    			ANDWF	date_Time_temp2_L0, 0, 0
$09DC	$6E2A	    			MOVWF	date_Time_hours_L0, 0
$09DE	$322A	    			RRCF	date_Time_hours_L0, 1, 0
$09E0	$9E2A	    			BCF	date_Time_hours_L0, 7, 0
$09E2	$322A	    			RRCF	date_Time_hours_L0, 1, 0
$09E4	$9E2A	    			BCF	date_Time_hours_L0, 7, 0
$09E6	$322A	    			RRCF	date_Time_hours_L0, 1, 0
$09E8	$9E2A	    			BCF	date_Time_hours_L0, 7, 0
$09EA	$322A	    			RRCF	date_Time_hours_L0, 1, 0
$09EC	$9E2A	    			BCF	date_Time_hours_L0, 7, 0
$09EE	$0E30	    			MOVLW	48
$09F0	$262A	    			ADDWF	date_Time_hours_L0, 1, 0
;ergasia_part1.c,101 :: 			hours[1]=(temp2 & 0x0F)+0x30;
$09F2	$0E0F	    			MOVLW	15
$09F4	$1436	    			ANDWF	date_Time_temp2_L0, 0, 0
$09F6	$6E2B	    			MOVWF	date_Time_hours_L0+1, 0
$09F8	$0E30	    			MOVLW	48
$09FA	$262B	    			ADDWF	date_Time_hours_L0+1, 1, 0
;ergasia_part1.c,105 :: 			day[0]=((temp3 & 0x70)>>4) +0x30;
$09FC	$0E70	    			MOVLW	112
$09FE	$1437	    			ANDWF	date_Time_temp3_L0, 0, 0
$0A00	$6E2C	    			MOVWF	date_Time_day_L0, 0
$0A02	$322C	    			RRCF	date_Time_day_L0, 1, 0
$0A04	$9E2C	    			BCF	date_Time_day_L0, 7, 0
$0A06	$322C	    			RRCF	date_Time_day_L0, 1, 0
$0A08	$9E2C	    			BCF	date_Time_day_L0, 7, 0
$0A0A	$322C	    			RRCF	date_Time_day_L0, 1, 0
$0A0C	$9E2C	    			BCF	date_Time_day_L0, 7, 0
$0A0E	$322C	    			RRCF	date_Time_day_L0, 1, 0
$0A10	$9E2C	    			BCF	date_Time_day_L0, 7, 0
$0A12	$0E30	    			MOVLW	48
$0A14	$262C	    			ADDWF	date_Time_day_L0, 1, 0
;ergasia_part1.c,108 :: 			date[0]=((temp4 & 0x30)>>4)+0x30;
$0A16	$0E30	    			MOVLW	48
$0A18	$1438	    			ANDWF	date_Time_temp4_L0, 0, 0
$0A1A	$6E2E	    			MOVWF	date_Time_date_L0, 0
$0A1C	$322E	    			RRCF	date_Time_date_L0, 1, 0
$0A1E	$9E2E	    			BCF	date_Time_date_L0, 7, 0
$0A20	$322E	    			RRCF	date_Time_date_L0, 1, 0
$0A22	$9E2E	    			BCF	date_Time_date_L0, 7, 0
$0A24	$322E	    			RRCF	date_Time_date_L0, 1, 0
$0A26	$9E2E	    			BCF	date_Time_date_L0, 7, 0
$0A28	$322E	    			RRCF	date_Time_date_L0, 1, 0
$0A2A	$9E2E	    			BCF	date_Time_date_L0, 7, 0
$0A2C	$0E30	    			MOVLW	48
$0A2E	$262E	    			ADDWF	date_Time_date_L0, 1, 0
;ergasia_part1.c,109 :: 			date[1]=((temp4 & 0x0F))+0x30;
$0A30	$0E0F	    			MOVLW	15
$0A32	$1438	    			ANDWF	date_Time_temp4_L0, 0, 0
$0A34	$6E2F	    			MOVWF	date_Time_date_L0+1, 0
$0A36	$0E30	    			MOVLW	48
$0A38	$262F	    			ADDWF	date_Time_date_L0+1, 1, 0
;ergasia_part1.c,111 :: 			month[0]=((temp5 & 0x10)>>4)+0x30;
$0A3A	$6A30	    			CLRF	date_Time_month_L0, 0
$0A3C	$B839	    			BTFSC	date_Time_temp5_L0, 4, 0
$0A3E	$2A30	    			INCF	date_Time_month_L0, 1, 0
$0A40	$0E30	    			MOVLW	48
$0A42	$2630	    			ADDWF	date_Time_month_L0, 1, 0
;ergasia_part1.c,112 :: 			month[1]=(temp5 & 0x0F)+0x30;
$0A44	$0E0F	    			MOVLW	15
$0A46	$1439	    			ANDWF	date_Time_temp5_L0, 0, 0
$0A48	$6E31	    			MOVWF	date_Time_month_L0+1, 0
$0A4A	$0E30	    			MOVLW	48
$0A4C	$2631	    			ADDWF	date_Time_month_L0+1, 1, 0
;ergasia_part1.c,114 :: 			year[0]=((temp6 & 0xF0)>>4)+0x30;
$0A4E	$0EF0	    			MOVLW	240
$0A50	$143A	    			ANDWF	date_Time_temp6_L0, 0, 0
$0A52	$6E32	    			MOVWF	date_Time_year_L0, 0
$0A54	$3232	    			RRCF	date_Time_year_L0, 1, 0
$0A56	$9E32	    			BCF	date_Time_year_L0, 7, 0
$0A58	$3232	    			RRCF	date_Time_year_L0, 1, 0
$0A5A	$9E32	    			BCF	date_Time_year_L0, 7, 0
$0A5C	$3232	    			RRCF	date_Time_year_L0, 1, 0
$0A5E	$9E32	    			BCF	date_Time_year_L0, 7, 0
$0A60	$3232	    			RRCF	date_Time_year_L0, 1, 0
$0A62	$9E32	    			BCF	date_Time_year_L0, 7, 0
$0A64	$0E30	    			MOVLW	48
$0A66	$2632	    			ADDWF	date_Time_year_L0, 1, 0
;ergasia_part1.c,115 :: 			year[1]=(temp6 & 0x0F)+0x30;
$0A68	$0E0F	    			MOVLW	15
$0A6A	$143A	    			ANDWF	date_Time_temp6_L0, 0, 0
$0A6C	$6E33	    			MOVWF	date_Time_year_L0+1, 0
$0A6E	$0E30	    			MOVLW	48
$0A70	$2633	    			ADDWF	date_Time_year_L0+1, 1, 0
;ergasia_part1.c,117 :: 			Lcd8_Config(&PORTE, &PORTD, 2,1,0,7,6, 5, 4, 3, 2, 1, 0); // Lcd_Init_EP5, see Autocomplete
$0A72	$0E84	    			MOVLW	PORTE
$0A74	$6E3B	    			MOVWF	FARG_Lcd8_Init+0, 0
$0A76	$0E0F	    			MOVLW	@PORTE
$0A78	$6E3C	    			MOVWF	FARG_Lcd8_Init+1, 0
$0A7A	$0E83	    			MOVLW	PORTD
$0A7C	$6E3D	    			MOVWF	FARG_Lcd8_Init+2, 0
$0A7E	$0E0F	    			MOVLW	@PORTD
$0A80	$6E3E	    			MOVWF	FARG_Lcd8_Init+3, 0
$0A82	$EC39	F002			CALL	_Lcd8_Init
;ergasia_part1.c,118 :: 			LCD8_Cmd(LCD_CURSOR_OFF);                  // send command to LCD (cursor off)
$0A86	$0E0C	    			MOVLW	12
$0A88	$6E41	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$0A8A	$EC23	F000			CALL	_Lcd8_Cmd
;ergasia_part1.c,119 :: 			LCD8_Cmd(LCD_CLEAR);                       // send command  to LCD (clear LCD)
$0A8E	$0E01	    			MOVLW	1
$0A90	$6E41	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$0A92	$EC23	F000			CALL	_Lcd8_Cmd
;ergasia_part1.c,121 :: 			LCD8_Chr(1,1,hours[0]);                    //wra
$0A96	$0E01	    			MOVLW	1
$0A98	$6E3B	    			MOVWF	FARG_Lcd8_Chr+0, 0
$0A9A	$0E01	    			MOVLW	1
$0A9C	$6E3C	    			MOVWF	FARG_Lcd8_Chr+1, 0
$0A9E	$C02A	F03D			MOVFF	date_Time_hours_L0, FARG_Lcd8_Chr+2
$0AA2	$ECB1	F001			CALL	_Lcd8_Chr
;ergasia_part1.c,122 :: 			LCD8_Chr(1,2,hours[1]);
$0AA6	$0E01	    			MOVLW	1
$0AA8	$6E3B	    			MOVWF	FARG_Lcd8_Chr+0, 0
$0AAA	$0E02	    			MOVLW	2
$0AAC	$6E3C	    			MOVWF	FARG_Lcd8_Chr+1, 0
$0AAE	$C02B	F03D			MOVFF	date_Time_hours_L0+1, FARG_Lcd8_Chr+2
$0AB2	$ECB1	F001			CALL	_Lcd8_Chr
;ergasia_part1.c,124 :: 			LCD8_Out(1,3,":");
$0AB6	$0E01	    			MOVLW	1
$0AB8	$6E3B	    			MOVWF	FARG_LCD8_Out+0, 0
$0ABA	$0E03	    			MOVLW	3
$0ABC	$6E3C	    			MOVWF	FARG_LCD8_Out+1, 0
$0ABE	$0E1E	    			MOVLW	lstr1_ergasia_part1
$0AC0	$6E3D	    			MOVWF	FARG_LCD8_Out+2, 0
$0AC2	$0E00	    			MOVLW	@lstr1_ergasia_part1
$0AC4	$6E3E	    			MOVWF	FARG_LCD8_Out+3, 0
$0AC6	$ECE2	F001			CALL	_LCD8_Out
;ergasia_part1.c,125 :: 			LCD8_Chr(1,4,minutes[0]);                  //lepta
$0ACA	$0E01	    			MOVLW	1
$0ACC	$6E3B	    			MOVWF	FARG_Lcd8_Chr+0, 0
$0ACE	$0E04	    			MOVLW	4
$0AD0	$6E3C	    			MOVWF	FARG_Lcd8_Chr+1, 0
$0AD2	$C026	F03D			MOVFF	date_Time_minutes_L0, FARG_Lcd8_Chr+2
$0AD6	$ECB1	F001			CALL	_Lcd8_Chr
;ergasia_part1.c,126 :: 			LCD8_Chr(1,5,minutes[1]);
$0ADA	$0E01	    			MOVLW	1
$0ADC	$6E3B	    			MOVWF	FARG_Lcd8_Chr+0, 0
$0ADE	$0E05	    			MOVLW	5
$0AE0	$6E3C	    			MOVWF	FARG_Lcd8_Chr+1, 0
$0AE2	$C027	F03D			MOVFF	date_Time_minutes_L0+1, FARG_Lcd8_Chr+2
$0AE6	$ECB1	F001			CALL	_Lcd8_Chr
;ergasia_part1.c,128 :: 			LCD8_Out(1,6,":");
$0AEA	$0E01	    			MOVLW	1
$0AEC	$6E3B	    			MOVWF	FARG_LCD8_Out+0, 0
$0AEE	$0E06	    			MOVLW	6
$0AF0	$6E3C	    			MOVWF	FARG_LCD8_Out+1, 0
$0AF2	$0E20	    			MOVLW	lstr2_ergasia_part1
$0AF4	$6E3D	    			MOVWF	FARG_LCD8_Out+2, 0
$0AF6	$0E00	    			MOVLW	@lstr2_ergasia_part1
$0AF8	$6E3E	    			MOVWF	FARG_LCD8_Out+3, 0
$0AFA	$ECE2	F001			CALL	_LCD8_Out
;ergasia_part1.c,129 :: 			LCD8_Chr(1,7,seconds[0]);                  //deuterolepta
$0AFE	$0E01	    			MOVLW	1
$0B00	$6E3B	    			MOVWF	FARG_Lcd8_Chr+0, 0
$0B02	$0E07	    			MOVLW	7
$0B04	$6E3C	    			MOVWF	FARG_Lcd8_Chr+1, 0
$0B06	$C028	F03D			MOVFF	date_Time_seconds_L0, FARG_Lcd8_Chr+2
$0B0A	$ECB1	F001			CALL	_Lcd8_Chr
;ergasia_part1.c,130 :: 			LCD8_Chr(1,8,seconds[1]);
$0B0E	$0E01	    			MOVLW	1
$0B10	$6E3B	    			MOVWF	FARG_Lcd8_Chr+0, 0
$0B12	$0E08	    			MOVLW	8
$0B14	$6E3C	    			MOVWF	FARG_Lcd8_Chr+1, 0
$0B16	$C029	F03D			MOVFF	date_Time_seconds_L0+1, FARG_Lcd8_Chr+2
$0B1A	$ECB1	F001			CALL	_Lcd8_Chr
;ergasia_part1.c,133 :: 			LCD8_Chr(2,1,date[0]);
$0B1E	$0E02	    			MOVLW	2
$0B20	$6E3B	    			MOVWF	FARG_Lcd8_Chr+0, 0
$0B22	$0E01	    			MOVLW	1
$0B24	$6E3C	    			MOVWF	FARG_Lcd8_Chr+1, 0
$0B26	$C02E	F03D			MOVFF	date_Time_date_L0, FARG_Lcd8_Chr+2
$0B2A	$ECB1	F001			CALL	_Lcd8_Chr
;ergasia_part1.c,134 :: 			LCD8_Chr(2,2,date[1]);
$0B2E	$0E02	    			MOVLW	2
$0B30	$6E3B	    			MOVWF	FARG_Lcd8_Chr+0, 0
$0B32	$0E02	    			MOVLW	2
$0B34	$6E3C	    			MOVWF	FARG_Lcd8_Chr+1, 0
$0B36	$C02F	F03D			MOVFF	date_Time_date_L0+1, FARG_Lcd8_Chr+2
$0B3A	$ECB1	F001			CALL	_Lcd8_Chr
;ergasia_part1.c,136 :: 			LCD8_Out(2,3,"/");
$0B3E	$0E02	    			MOVLW	2
$0B40	$6E3B	    			MOVWF	FARG_LCD8_Out+0, 0
$0B42	$0E03	    			MOVLW	3
$0B44	$6E3C	    			MOVWF	FARG_LCD8_Out+1, 0
$0B46	$0E22	    			MOVLW	lstr3_ergasia_part1
$0B48	$6E3D	    			MOVWF	FARG_LCD8_Out+2, 0
$0B4A	$0E00	    			MOVLW	@lstr3_ergasia_part1
$0B4C	$6E3E	    			MOVWF	FARG_LCD8_Out+3, 0
$0B4E	$ECE2	F001			CALL	_LCD8_Out
;ergasia_part1.c,137 :: 			LCD8_Chr(2,4,month[0]);                   //arithmos mhna
$0B52	$0E02	    			MOVLW	2
$0B54	$6E3B	    			MOVWF	FARG_Lcd8_Chr+0, 0
$0B56	$0E04	    			MOVLW	4
$0B58	$6E3C	    			MOVWF	FARG_Lcd8_Chr+1, 0
$0B5A	$C030	F03D			MOVFF	date_Time_month_L0, FARG_Lcd8_Chr+2
$0B5E	$ECB1	F001			CALL	_Lcd8_Chr
;ergasia_part1.c,138 :: 			LCD8_Chr(2,5,month[1]);
$0B62	$0E02	    			MOVLW	2
$0B64	$6E3B	    			MOVWF	FARG_Lcd8_Chr+0, 0
$0B66	$0E05	    			MOVLW	5
$0B68	$6E3C	    			MOVWF	FARG_Lcd8_Chr+1, 0
$0B6A	$C031	F03D			MOVFF	date_Time_month_L0+1, FARG_Lcd8_Chr+2
$0B6E	$ECB1	F001			CALL	_Lcd8_Chr
;ergasia_part1.c,140 :: 			LCD8_Out(2,6,"/");
$0B72	$0E02	    			MOVLW	2
$0B74	$6E3B	    			MOVWF	FARG_LCD8_Out+0, 0
$0B76	$0E06	    			MOVLW	6
$0B78	$6E3C	    			MOVWF	FARG_LCD8_Out+1, 0
$0B7A	$0E24	    			MOVLW	lstr4_ergasia_part1
$0B7C	$6E3D	    			MOVWF	FARG_LCD8_Out+2, 0
$0B7E	$0E00	    			MOVLW	@lstr4_ergasia_part1
$0B80	$6E3E	    			MOVWF	FARG_LCD8_Out+3, 0
$0B82	$ECE2	F001			CALL	_LCD8_Out
;ergasia_part1.c,141 :: 			LCD8_Chr(2,7,year[0]);                    //xronia
$0B86	$0E02	    			MOVLW	2
$0B88	$6E3B	    			MOVWF	FARG_Lcd8_Chr+0, 0
$0B8A	$0E07	    			MOVLW	7
$0B8C	$6E3C	    			MOVWF	FARG_Lcd8_Chr+1, 0
$0B8E	$C032	F03D			MOVFF	date_Time_year_L0, FARG_Lcd8_Chr+2
$0B92	$ECB1	F001			CALL	_Lcd8_Chr
;ergasia_part1.c,142 :: 			LCD8_Chr(2,8,year[1]);
$0B96	$0E02	    			MOVLW	2
$0B98	$6E3B	    			MOVWF	FARG_Lcd8_Chr+0, 0
$0B9A	$0E08	    			MOVLW	8
$0B9C	$6E3C	    			MOVWF	FARG_Lcd8_Chr+1, 0
$0B9E	$C033	F03D			MOVFF	date_Time_year_L0+1, FARG_Lcd8_Chr+2
$0BA2	$ECB1	F001			CALL	_Lcd8_Chr
;ergasia_part1.c,144 :: 			}
$0BA6	$0012	    			RETURN
$0BA8	$	_stepMotor:
;ergasia_part1.c,146 :: 			void stepMotor(int taxuthta_peristrofis){
;ergasia_part1.c,148 :: 			TRISB = 0b00001111;                                //epeidh xrhsimopoiw mono 4 podarakia arxikopoiw ta 4 ws eisodoi ta alla 4 ws exodoi
$0BA8	$0E0F	    			MOVLW	15
$0BAA	$6E93	    			MOVWF	TRISB, 0
;ergasia_part1.c,149 :: 			PORTB =0x00;
$0BAC	$6A81	    			CLRF	PORTB, 0
;ergasia_part1.c,151 :: 			while(1){                                         //to syndew sta rb4 rb5 rb6 rb7
$0BAE	$	L_stepMotor_23:
;ergasia_part1.c,152 :: 			PORTB.F4 =0;
$0BAE	$9881	    			BCF	PORTB, 4, 0
;ergasia_part1.c,153 :: 			PORTB.F5 =1;
$0BB0	$8A81	    			BSF	PORTB, 5, 0
;ergasia_part1.c,154 :: 			PORTB.F6 =0;
$0BB2	$9C81	    			BCF	PORTB, 6, 0
;ergasia_part1.c,155 :: 			PORTB.F7 =1;
$0BB4	$8E81	    			BSF	PORTB, 7, 0
;ergasia_part1.c,157 :: 			Vdelay_ms(taxuthta_peristrofis);
$0BB6	$C01E	F03B			MOVFF	FARG_stepMotor+0, FARG_VDelay_ms+0
$0BBA	$C01F	F03C			MOVFF	FARG_stepMotor+1, FARG_VDelay_ms+1
$0BBE	$EC87	F002			CALL	_VDelay_ms
;ergasia_part1.c,159 :: 			PORTB.F4 =1;
$0BC2	$8881	    			BSF	PORTB, 4, 0
;ergasia_part1.c,160 :: 			PORTB.F5 =0;
$0BC4	$9A81	    			BCF	PORTB, 5, 0
;ergasia_part1.c,161 :: 			PORTB.F6 =0;
$0BC6	$9C81	    			BCF	PORTB, 6, 0
;ergasia_part1.c,162 :: 			PORTB.F7 =1;
$0BC8	$8E81	    			BSF	PORTB, 7, 0
;ergasia_part1.c,164 :: 			Vdelay_ms(taxuthta_peristrofis);
$0BCA	$C01E	F03B			MOVFF	FARG_stepMotor+0, FARG_VDelay_ms+0
$0BCE	$C01F	F03C			MOVFF	FARG_stepMotor+1, FARG_VDelay_ms+1
$0BD2	$EC87	F002			CALL	_VDelay_ms
;ergasia_part1.c,166 :: 			PORTB.F4 =1;
$0BD6	$8881	    			BSF	PORTB, 4, 0
;ergasia_part1.c,167 :: 			PORTB.F5 =0;
$0BD8	$9A81	    			BCF	PORTB, 5, 0
;ergasia_part1.c,168 :: 			PORTB.F6 =1;
$0BDA	$8C81	    			BSF	PORTB, 6, 0
;ergasia_part1.c,169 :: 			PORTB.F7 =0;
$0BDC	$9E81	    			BCF	PORTB, 7, 0
;ergasia_part1.c,171 :: 			Vdelay_ms(taxuthta_peristrofis);
$0BDE	$C01E	F03B			MOVFF	FARG_stepMotor+0, FARG_VDelay_ms+0
$0BE2	$C01F	F03C			MOVFF	FARG_stepMotor+1, FARG_VDelay_ms+1
$0BE6	$EC87	F002			CALL	_VDelay_ms
;ergasia_part1.c,173 :: 			PORTB.F4 =0;
$0BEA	$9881	    			BCF	PORTB, 4, 0
;ergasia_part1.c,174 :: 			PORTB.F5 =1;
$0BEC	$8A81	    			BSF	PORTB, 5, 0
;ergasia_part1.c,175 :: 			PORTB.F6 =1;
$0BEE	$8C81	    			BSF	PORTB, 6, 0
;ergasia_part1.c,176 :: 			PORTB.F7 =0;
$0BF0	$9E81	    			BCF	PORTB, 7, 0
;ergasia_part1.c,178 :: 			Vdelay_ms(taxuthta_peristrofis);            //1 strofi ana 3sec
$0BF2	$C01E	F03B			MOVFF	FARG_stepMotor+0, FARG_VDelay_ms+0
$0BF6	$C01F	F03C			MOVFF	FARG_stepMotor+1, FARG_VDelay_ms+1
$0BFA	$EC87	F002			CALL	_VDelay_ms
;ergasia_part1.c,179 :: 			}
$0BFE	$D7D7	    			BRA	L_stepMotor_23
;ergasia_part1.c,180 :: 			}
$0C00	$0012	    			RETURN
$0C02	$	_adc_and_servo:
$0C02	$0E41	    			MOVLW	65
$0C04	$6E1E	    			MOVWF	lstr5_ergasia_part1+0, 0
$0C06	$0E44	    			MOVLW	68
$0C08	$6E1F	    			MOVWF	lstr5_ergasia_part1+1, 0
$0C0A	$0E43	    			MOVLW	67
$0C0C	$6E20	    			MOVWF	lstr5_ergasia_part1+2, 0
$0C0E	$0E20	    			MOVLW	32
$0C10	$6E21	    			MOVWF	lstr5_ergasia_part1+3, 0
$0C12	$0E56	    			MOVLW	86
$0C14	$6E22	    			MOVWF	lstr5_ergasia_part1+4, 0
$0C16	$0E61	    			MOVLW	97
$0C18	$6E23	    			MOVWF	lstr5_ergasia_part1+5, 0
$0C1A	$0E6C	    			MOVLW	108
$0C1C	$6E24	    			MOVWF	lstr5_ergasia_part1+6, 0
$0C1E	$0E75	    			MOVLW	117
$0C20	$6E25	    			MOVWF	lstr5_ergasia_part1+7, 0
$0C22	$0E65	    			MOVLW	101
$0C24	$6E26	    			MOVWF	lstr5_ergasia_part1+8, 0
$0C26	$0E3A	    			MOVLW	58
$0C28	$6E27	    			MOVWF	lstr5_ergasia_part1+9, 0
$0C2A	$6A28	    			CLRF	lstr5_ergasia_part1+10, 0
$0C2C	$0E2F	    			MOVLW	47
$0C2E	$6E29	    			MOVWF	lstr6_ergasia_part1+0, 0
$0C30	$0E32	    			MOVLW	50
$0C32	$6E2A	    			MOVWF	lstr6_ergasia_part1+1, 0
$0C34	$0E35	    			MOVLW	53
$0C36	$6E2B	    			MOVWF	lstr6_ergasia_part1+2, 0
$0C38	$0E35	    			MOVLW	53
$0C3A	$6E2C	    			MOVWF	lstr6_ergasia_part1+3, 0
$0C3C	$6A2D	    			CLRF	lstr6_ergasia_part1+4, 0
$0C3E	$0E30	    			MOVLW	48
$0C40	$6E32	    			MOVWF	adc_and_servo_text_L0+0, 0
$0C42	$0E30	    			MOVLW	48
$0C44	$6E33	    			MOVWF	adc_and_servo_text_L0+1, 0
$0C46	$0E30	    			MOVLW	48
$0C48	$6E34	    			MOVWF	adc_and_servo_text_L0+2, 0
$0C4A	$0E30	    			MOVLW	48
$0C4C	$6E35	    			MOVWF	adc_and_servo_text_L0+3, 0
$0C4E	$6A36	    			CLRF	adc_and_servo_text_L0+4, 0
$0C50	$6A37	    			CLRF	adc_and_servo_text_L0+5, 0
;ergasia_part1.c,182 :: 			void adc_and_servo(){
;ergasia_part1.c,189 :: 			ADCON0     = 1;
$0C52	$0E01	    			MOVLW	1
$0C54	$6EC2	    			MOVWF	ADCON0, 0
;ergasia_part1.c,190 :: 			ADCON1     = 0x01;                                // configure VDD as Vref, PORTA pins as analog, PORTB pins as digital
$0C56	$0E01	    			MOVLW	1
$0C58	$6EC1	    			MOVWF	ADCON1, 0
;ergasia_part1.c,192 :: 			Lcd8_Config(&PORTE, &PORTD, 2,1,0, 7,6,5,4,3,2,1,0);
$0C5A	$0E84	    			MOVLW	PORTE
$0C5C	$6E3B	    			MOVWF	FARG_Lcd8_Init+0, 0
$0C5E	$0E0F	    			MOVLW	@PORTE
$0C60	$6E3C	    			MOVWF	FARG_Lcd8_Init+1, 0
$0C62	$0E83	    			MOVLW	PORTD
$0C64	$6E3D	    			MOVWF	FARG_Lcd8_Init+2, 0
$0C66	$0E0F	    			MOVLW	@PORTD
$0C68	$6E3E	    			MOVWF	FARG_Lcd8_Init+3, 0
$0C6A	$EC39	F002			CALL	_Lcd8_Init
;ergasia_part1.c,193 :: 			Lcd8_Cmd(LCD_CURSOR_OFF);                           // Turn off cursor
$0C6E	$0E0C	    			MOVLW	12
$0C70	$6E41	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$0C72	$EC23	F000			CALL	_Lcd8_Cmd
;ergasia_part1.c,194 :: 			Lcd8_Cmd(LCD_CLEAR);                                 // Clear screen
$0C76	$0E01	    			MOVLW	1
$0C78	$6E41	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$0C7A	$EC23	F000			CALL	_Lcd8_Cmd
;ergasia_part1.c,195 :: 			Lcd8_Out(1, 1, "ADC Value:");                        // Print text on LCD
$0C7E	$0E01	    			MOVLW	1
$0C80	$6E3B	    			MOVWF	FARG_LCD8_Out+0, 0
$0C82	$0E01	    			MOVLW	1
$0C84	$6E3C	    			MOVWF	FARG_LCD8_Out+1, 0
$0C86	$0E1E	    			MOVLW	lstr5_ergasia_part1
$0C88	$6E3D	    			MOVWF	FARG_LCD8_Out+2, 0
$0C8A	$0E00	    			MOVLW	@lstr5_ergasia_part1
$0C8C	$6E3E	    			MOVWF	FARG_LCD8_Out+3, 0
$0C8E	$ECE2	F001			CALL	_LCD8_Out
;ergasia_part1.c,197 :: 			while (1) {
$0C92	$	L_adc_and_servo_25:
;ergasia_part1.c,199 :: 			adc_rd  = ADC_read(0)/4;                     // get ADC value from first channel
$0C92	$6A3B	    			CLRF	FARG_Adc_Read+0, 0
$0C94	$EC0B	F003			CALL	_Adc_Read
$0C98	$0E02	    			MOVLW	2
$0C9A	$6E04	    			MOVWF	STACK_4, 0
$0C9C	$5004	    			MOVF	STACK_4, 0, 0
$0C9E	$	L_adc_and_servo_32:
$0C9E	$E005	    			BZ	L_adc_and_servo_33
$0CA0	$3201	    			RRCF	STACK_0+1, 1, 0
$0CA2	$3200	    			RRCF	STACK_0, 1, 0
$0CA4	$9E01	    			BCF	STACK_0+1, 7, 0
$0CA6	$0FFF	    			ADDLW	255
$0CA8	$D7FA	    			BRA	L_adc_and_servo_32
$0CAA	$	L_adc_and_servo_33:
$0CAA	$C000	F030			MOVFF	STACK_0, adc_and_servo_adc_rd_L0
$0CAE	$C001	F031			MOVFF	STACK_0+1, adc_and_servo_adc_rd_L0+1
;ergasia_part1.c,201 :: 			wordToStr(adc_rd, text);
$0CB2	$C000	F03B			MOVFF	STACK_0, FARG_WordToStr+0
$0CB6	$C001	F03C			MOVFF	STACK_0+1, FARG_WordToStr+1
$0CBA	$0E32	    			MOVLW	adc_and_servo_text_L0
$0CBC	$6E3D	    			MOVWF	FARG_WordToStr+2, 0
$0CBE	$0E00	    			MOVLW	@adc_and_servo_text_L0
$0CC0	$6E3E	    			MOVWF	FARG_WordToStr+3, 0
$0CC2	$EC33	F003			CALL	_WordToStr
;ergasia_part1.c,202 :: 			Lcd8_Out(2,4, text);
$0CC6	$0E02	    			MOVLW	2
$0CC8	$6E3B	    			MOVWF	FARG_LCD8_Out+0, 0
$0CCA	$0E04	    			MOVLW	4
$0CCC	$6E3C	    			MOVWF	FARG_LCD8_Out+1, 0
$0CCE	$0E32	    			MOVLW	adc_and_servo_text_L0
$0CD0	$6E3D	    			MOVWF	FARG_LCD8_Out+2, 0
$0CD2	$0E00	    			MOVLW	@adc_and_servo_text_L0
$0CD4	$6E3E	    			MOVWF	FARG_LCD8_Out+3, 0
$0CD6	$ECE2	F001			CALL	_LCD8_Out
;ergasia_part1.c,203 :: 			delay_ms(20);
$0CDA	$0E34	    			MOVLW	52
$0CDC	$6E0B	    			MOVWF	STACK_11, 0
$0CDE	$0EFF	    			MOVLW	255
$0CE0	$6E0A	    			MOVWF	STACK_10, 0
$0CE2	$2E0B	    			DECFSZ	STACK_11, F, 0
$0CE4	$D001	    			BRA	$+2
$0CE6	$D003	    			BRA	$+4
$0CE8	$2E0A	    			DECFSZ	STACK_10, F, 0
$0CEA	$D7FE	    			BRA	$-1
$0CEC	$D7FA	    			BRA	$-5
$0CEE	$0ECF	    			MOVLW	207
$0CF0	$6E0A	    			MOVWF	STACK_10, 0
$0CF2	$2E0A	    			DECFSZ	STACK_10, F, 0
$0CF4	$D7FE	    			BRA	$-1
$0CF6	$0000	    			NOP
;ergasia_part1.c,205 :: 			speed_tester=adc_rd;                         //dinw tin timi apo to potensiometro gia na tin xrhsimopoihsw ston servokinitira
$0CF8	$C030	F02E			MOVFF	adc_and_servo_adc_rd_L0, adc_and_servo_speed_tester_L0
$0CFC	$C031	F02F			MOVFF	adc_and_servo_adc_rd_L0+1, adc_and_servo_speed_tester_L0+1
;ergasia_part1.c,207 :: 			PORTC.F2 = 0xFF;                             // Set PORTC.2 to 1
$0D00	$0EFC	    			MOVLW	252
$0D02	$1282	    			IORWF	PORTC, 1, 0
;ergasia_part1.c,208 :: 			TRISC.F2 = 0x00;                             // PORTC.2 exodos
$0D04	$9494	    			BCF	TRISC, 2, 0
;ergasia_part1.c,210 :: 			Pwm_Init(500);                               // Initialize PWM module 500Hz ->2ms period
$0D06	$80CA	    			BSF	T2CON, T2CKPS0, 0
$0D08	$82CA	    			BSF	T2CON, T2CKPS1, 0
$0D0A	$0EF9	    			MOVLW	249
$0D0C	$6ECB	    			MOVWF	PR2, 0
$0D0E	$ECD0	F003			CALL	_PWM_Init
;ergasia_part1.c,212 :: 			Pwm_Start();                                 // Start PWM
$0D12	$EC93	F003			CALL	_PWM_Start
;ergasia_part1.c,213 :: 			Pwm_Change_Duty(speed_tester);               // set speed apo 0 ews 255
$0D16	$C02E	F03B			MOVFF	adc_and_servo_speed_tester_L0, FARG_PWM_Change_Duty+0
$0D1A	$EC98	F003			CALL	_PWM_Change_Duty
;ergasia_part1.c,215 :: 			delay_ms(300);
$0D1E	$0E04	    			MOVLW	4
$0D20	$6E0C	    			MOVWF	STACK_12, 0
$0D22	$0EFF	    			MOVLW	255
$0D24	$6E0B	    			MOVWF	STACK_11, 0
$0D26	$0EFF	    			MOVLW	255
$0D28	$6E0A	    			MOVWF	STACK_10, 0
$0D2A	$2E0C	    			DECFSZ	STACK_12, F, 0
$0D2C	$D001	    			BRA	$+2
$0D2E	$D007	    			BRA	$+8
$0D30	$2E0B	    			DECFSZ	STACK_11, F, 0
$0D32	$D001	    			BRA	$+2
$0D34	$D003	    			BRA	$+4
$0D36	$2E0A	    			DECFSZ	STACK_10, F, 0
$0D38	$D7FE	    			BRA	$-1
$0D3A	$D7FA	    			BRA	$-5
$0D3C	$D7F6	    			BRA	$-9
$0D3E	$0E10	    			MOVLW	16
$0D40	$6E0B	    			MOVWF	STACK_11, 0
$0D42	$0EFF	    			MOVLW	255
$0D44	$6E0A	    			MOVWF	STACK_10, 0
$0D46	$2E0B	    			DECFSZ	STACK_11, F, 0
$0D48	$D001	    			BRA	$+2
$0D4A	$D003	    			BRA	$+4
$0D4C	$2E0A	    			DECFSZ	STACK_10, F, 0
$0D4E	$D7FE	    			BRA	$-1
$0D50	$D7FA	    			BRA	$-5
$0D52	$0E26	    			MOVLW	38
$0D54	$6E0A	    			MOVWF	STACK_10, 0
$0D56	$2E0A	    			DECFSZ	STACK_10, F, 0
$0D58	$D7FE	    			BRA	$-1
;ergasia_part1.c,216 :: 			WordtoStr(speed_tester, text);
$0D5A	$C02E	F03B			MOVFF	adc_and_servo_speed_tester_L0, FARG_WordToStr+0
$0D5E	$C02F	F03C			MOVFF	adc_and_servo_speed_tester_L0+1, FARG_WordToStr+1
$0D62	$0E32	    			MOVLW	adc_and_servo_text_L0
$0D64	$6E3D	    			MOVWF	FARG_WordToStr+2, 0
$0D66	$0E00	    			MOVLW	@adc_and_servo_text_L0
$0D68	$6E3E	    			MOVWF	FARG_WordToStr+3, 0
$0D6A	$EC33	F003			CALL	_WordToStr
;ergasia_part1.c,217 :: 			LCD8_Out(1,8,text);
$0D6E	$0E01	    			MOVLW	1
$0D70	$6E3B	    			MOVWF	FARG_LCD8_Out+0, 0
$0D72	$0E08	    			MOVLW	8
$0D74	$6E3C	    			MOVWF	FARG_LCD8_Out+1, 0
$0D76	$0E32	    			MOVLW	adc_and_servo_text_L0
$0D78	$6E3D	    			MOVWF	FARG_LCD8_Out+2, 0
$0D7A	$0E00	    			MOVLW	@adc_and_servo_text_L0
$0D7C	$6E3E	    			MOVWF	FARG_LCD8_Out+3, 0
$0D7E	$ECE2	F001			CALL	_LCD8_Out
;ergasia_part1.c,218 :: 			LCD8_Out(1,13,"/255");
$0D82	$0E01	    			MOVLW	1
$0D84	$6E3B	    			MOVWF	FARG_LCD8_Out+0, 0
$0D86	$0E0D	    			MOVLW	13
$0D88	$6E3C	    			MOVWF	FARG_LCD8_Out+1, 0
$0D8A	$0E29	    			MOVLW	lstr6_ergasia_part1
$0D8C	$6E3D	    			MOVWF	FARG_LCD8_Out+2, 0
$0D8E	$0E00	    			MOVLW	@lstr6_ergasia_part1
$0D90	$6E3E	    			MOVWF	FARG_LCD8_Out+3, 0
$0D92	$ECE2	F001			CALL	_LCD8_Out
;ergasia_part1.c,219 :: 			}
$0D96	$D77D	    			BRA	L_adc_and_servo_25
;ergasia_part1.c,220 :: 			}
$0D98	$0012	    			RETURN
$0D9A	$	_main:
;ergasia_part1.c,221 :: 			void main(){
;ergasia_part1.c,225 :: 			taxuthta_peristrofis=7;                                  //gia tin taxitita tou stepper
$0D9A	$0E07	    			MOVLW	7
$0D9C	$6E1C	    			MOVWF	main_taxuthta_peristrofis_L0, 0
$0D9E	$0E00	    			MOVLW	0
$0DA0	$6E1D	    			MOVWF	main_taxuthta_peristrofis_L0+1, 0
;ergasia_part1.c,227 :: 			keypressed = my_read_keypad();
$0DA2	$ECD4	F003			CALL	_my_read_keypad
$0DA6	$C000	F01B			MOVFF	STACK_0, main_keypressed_L0
;ergasia_part1.c,229 :: 			TRISD = 0x00;                                           //Define PORTD to operate as outpout
$0DAA	$6A95	    			CLRF	TRISD, 0
;ergasia_part1.c,230 :: 			TRISA = 0xFB;                                           // Define PORTA pin 2 as output.
$0DAC	$0EFB	    			MOVLW	251
$0DAE	$6E92	    			MOVWF	TRISA, 0
;ergasia_part1.c,232 :: 			if(keypressed=='1'){                                    //otan patisw to koubi 1 kalw tin sunartisi date_time pou tha mas deixei sto lcd tin wra kai tin hmeromhni
$0DB0	$5000	    			MOVF	STACK_0, 0, 0
$0DB2	$0A31	    			XORLW	49
$0DB4	$E103	    			BNZ	L_main_27
;ergasia_part1.c,233 :: 			date_time();
$0DB6	$EC82	F004			CALL	_date_Time
;ergasia_part1.c,234 :: 			}
$0DBA	$D00F	    			BRA	L_main_28
$0DBC	$	L_main_27:
;ergasia_part1.c,235 :: 			else if(keypressed=='2'){                              //patwntas to 2 energopoieitai o vimatikos kinitiras
$0DBC	$501B	    			MOVF	main_keypressed_L0, 0, 0
$0DBE	$0A32	    			XORLW	50
$0DC0	$E107	    			BNZ	L_main_29
;ergasia_part1.c,236 :: 			stepMotor(taxuthta_peristrofis);                    //synartisi gia ton vimatiko kinitira
$0DC2	$C01C	F01E			MOVFF	main_taxuthta_peristrofis_L0, FARG_stepMotor+0
$0DC6	$C01D	F01F			MOVFF	main_taxuthta_peristrofis_L0+1, FARG_stepMotor+1
$0DCA	$ECD4	F005			CALL	_stepMotor
;ergasia_part1.c,237 :: 			}
$0DCE	$D005	    			BRA	L_main_30
$0DD0	$	L_main_29:
;ergasia_part1.c,238 :: 			else if(keypressed=='3'){                              //otan patisw to 3  xekinaei o servokinitiras
$0DD0	$501B	    			MOVF	main_keypressed_L0, 0, 0
$0DD2	$0A33	    			XORLW	51
$0DD4	$E102	    			BNZ	L_main_31
;ergasia_part1.c,239 :: 			adc_and_servo();                                    //kalw tin sunartisi
$0DD6	$EC01	F006			CALL	_adc_and_servo
;ergasia_part1.c,240 :: 			}
$0DDA	$	L_main_31:
$0DDA	$	L_main_30:
$0DDA	$	L_main_28:
;ergasia_part1.c,241 :: 			}
$0DDA	$D7FF	    			BRA	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0008		Delay_1us
$000E		Delay_5500us
$002C		Delay_50us
$0036		SoftI2C_PutZerosToLAT
$0046		Lcd8_Cmd
$00A4		Mul_32x32_U
$0100		Delay_22us
$010C		Div_16x16_U
$0148		Mul_16x16_S
$01B0		Soft_I2C_Start
$01D6		Soft_I2C_Write
$0296		Soft_I2C_Read
$0328		Soft_I2C_Stop
$0362		Lcd8_Chr
$03C4		LCD8_Out
$044C		Soft_I2C_Init
$0472		Lcd8_Init
$050E		VDelay_ms
$0616		Adc_Read
$0666		WordToStr
$0726		PWM_Start
$0730		PWM_Change_Duty
$07A0		PWM_Init
$07A8		my_read_keypad
$0904		date_Time
$0BA8		stepMotor
$0C02		adc_and_servo
$0D9A		main


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0008		_Delay_1us:
$000E		_Delay_5500us:
$002C		_Delay_50us:
$0036		SoftI2C_PutZerosToLAT:
$0046		_Lcd8_Cmd:
$005C		L_Lcd8_Cmd_0:
$0088		L_Lcd8_Cmd_1:
$008A		L_Lcd8_Cmd_2:
$009E		L_Lcd8_Cmd_3:
$00A2		L_Lcd8_Cmd_4:
$00A4		_Mul_32x32_U:
$00B2		_NEXT:
$00BC		_LOOP:
$00EE		_EXIT1:
$00FE		_EXIT2:
$0100		_Delay_22us:
$010C		_Div_16x16_U:
$0148		_Mul_16x16_S:
$01B0		_Soft_I2C_Start:
$01D6		_Soft_I2C_Write:
$01E6		L_Soft_I2C_Write_4:
$0200		L_Soft_I2C_Write_6:
$0212		l_018:
$0214		l_01C:
$022E		L_Soft_I2C_Write_5:
$024E		L_Soft_I2C_Write_7:
$0296		_Soft_I2C_Read:
$02A4		L_Soft_I2C_Read_0:
$02B8		L_Soft_I2C_Read_2:
$02E0		L_Soft_I2C_Read_1:
$02EE		L_Soft_I2C_Read_3:
$02F8		L_07C:
$0328		_Soft_I2C_Stop:
$0362		_Lcd8_Chr:
$0364		L_Lcd8_Chr_7:
$036A		L_Lcd8_Chr_8:
$0370		L_Lcd8_Chr_9:
$0376		L_Lcd8_Chr_10:
$037C		L_Lcd8_Chr_11:
$0382		L_Lcd8_Chr_5:
$039C		L_Lcd8_Chr_6:
$03C4		_LCD8_Out:
$03C6		L_LCD8_Out_14:
$03CC		L_LCD8_Out_15:
$03D2		L_LCD8_Out_16:
$03D8		L_LCD8_Out_17:
$03DE		L_LCD8_Out_18:
$03E4		L_LCD8_Out_12:
$03FE		L_LCD8_Out_13:
$041A		L_LCD8_Out_19:
$0446		L_LCD8_Out_20:
$044C		_Soft_I2C_Init:
$0472		_Lcd8_Init:
$050E		_VDelay_ms:
$0564		L_VDelay_ms_5:
$056A		L_VDelay_ms_2:
$05C0		L_VDelay_ms_6:
$05D2		L_VDelay_ms_3:
$05D2		L_VDelay_ms_7:
$0614		L_VDelay_ms_4:
$0616		_Adc_Read:
$063C		L_Adc_Read_0:
$0640		L_Adc_Read_1:
$064E		L_Adc_Read_2:
$065A		L_Adc_Read_3:
$0666		_WordToStr:
$06C4		L_WordToStr_4:
$06D2		L_WordToStr_51:
$0724		L_WordToStr_5:
$0726		_PWM_Start:
$0730		_PWM_Change_Duty:
$0756		L_PWM_Change_Duty_4:
$0764		L_PWM_Change_Duty_5:
$07A0		_PWM_Init:
$07A8		_my_read_keypad:
$07B8		L_my_read_keypad_0:
$07EC		L_my_read_keypad_2:
$07FE		L_my_read_keypad_4:
$0810		L_my_read_keypad_6:
$0820		L_my_read_keypad_3:
$0820		L_my_read_keypad_5:
$0820		L_my_read_keypad_7:
$0820		L_my_read_keypad_8:
$0856		L_my_read_keypad_9:
$0868		L_my_read_keypad_11:
$087A		L_my_read_keypad_13:
$088A		L_my_read_keypad_10:
$088A		L_my_read_keypad_12:
$088A		L_my_read_keypad_14:
$088A		L_my_read_keypad_15:
$08C0		L_my_read_keypad_16:
$08D2		L_my_read_keypad_18:
$08E4		L_my_read_keypad_20:
$08F4		L_my_read_keypad_17:
$08F4		L_my_read_keypad_19:
$08F4		L_my_read_keypad_21:
$08F4		L_my_read_keypad_22:
$08FE		L_my_read_keypad_1:
$0904		_date_Time:
$0BA8		_stepMotor:
$0BAE		L_stepMotor_23:
$0C02		_adc_and_servo:
$0C92		L_adc_and_servo_25:
$0C9E		L_adc_and_servo_32:
$0CAA		L_adc_and_servo_33:
$0D9A		_main:
$0DBC		L_main_27:
$0DD0		L_main_29:
$0DDA		L_main_28:
$0DDA		L_main_30:
$0DDA		L_main_31:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		STACK_0
$0001		STACK_1
$0002		STACK_2
$0003		STACK_3
$0004		STACK_4
$0005		STACK_5
$0006		STACK_6
$0007		STACK_7
$0008		STACK_8
$0009		STACK_9
$000A		STACK_10
$000B		STACK_11
$000C		STACK_12
$000D		STACK_13
$000E		STACK_14
$000F		STACK_15
$0010		STACK_16
$0011		STACK_17
$0012		STACK_18
$0013		STACK_19
$0014		STACK_20
$0015		___porti2c
$0016		Lcd8bit_main_global_dataAddress
$0018		Lcd8bit_main_global_ctrlAddress
$001A		Lcd8bit_main_global_cmd
$001B		main_keypressed_L0
$001C		main_taxuthta_peristrofis_L0
$001E		FARG_stepMotor+0
$001E		lstr1_ergasia_part1
$001E		lstr5_ergasia_part1
$001E		my_read_keypad_var_L0
$001F		my_read_keypad_key_L0
$0020		lstr2_ergasia_part1
$0022		lstr3_ergasia_part1
$0024		lstr4_ergasia_part1
$0026		date_Time_minutes_L0
$0028		date_Time_seconds_L0
$0029		lstr6_ergasia_part1
$002A		date_Time_hours_L0
$002C		date_Time_day_L0
$002E		adc_and_servo_speed_tester_L0
$002E		date_Time_date_L0
$0030		adc_and_servo_adc_rd_L0
$0030		date_Time_month_L0
$0032		adc_and_servo_text_L0
$0032		date_Time_year_L0
$0034		date_Time_temp_L0
$0035		date_Time_temp1_L0
$0036		date_Time_temp2_L0
$0037		date_Time_temp3_L0
$0038		date_Time_temp4_L0
$0039		date_Time_temp5_L0
$003A		date_Time_temp6_L0
$003B		FARG_Adc_Read+0
$003B		FARG_Lcd8_Chr+0
$003B		FARG_Lcd8_Init+0
$003B		FARG_LCD8_Out+0
$003B		FARG_PWM_Change_Duty+0
$003B		FARG_PWM_Init+0
$003B		FARG_Soft_I2C_Init+0
$003B		FARG_Soft_I2C_Read+0
$003B		FARG_Soft_I2C_Write+0
$003B		FARG_VDelay_ms+0
$003B		FARG_WordToStr+0
$003C		FARG_Lcd8_Chr+1
$003C		FARG_LCD8_Out+1
$003C		Soft_I2C_Read_result_L0
$003C		Soft_I2C_Write_temp_L0
$003D		FARG_Lcd8_Chr+2
$003D		FARG_Lcd8_Init+2
$003D		FARG_LCD8_Out+2
$003D		FARG_WordToStr+2
$003D		Soft_I2C_Read_temp_L0
$003D		Soft_I2C_Write_result_L0
$003D		VDelay_ms_NumberOfCyc_L0
$003F		LCD8_Out_i_L0
$003F		WordToStr_pos_L0
$0041		FARG_Lcd8_Cmd+0
$0F81		PORTB
$0F82		PORTC
$0F83		PORTD
$0F84		PORTE
$0F92		TRISA
$0F93		TRISB
$0F94		TRISC
$0F95		TRISD
$0FBD		CCP1CON
$0FBE		CCPR1L
$0FC1		ADCON1
$0FC2		ADCON0
$0FC3		ADRESL
$0FC4		ADRESH
$0FCA		T2CON
$0FCB		PR2
$0FD8		STATUS
$0FD9		FSR2L
$0FDA		FSR2H
$0FDB		PLUSW2
$0FDC		PREINC2
$0FDD		POSTDEC2
$0FDE		POSTINC2
$0FDF		INDF2
$0FE0		BSR
$0FE1		FSR1L
$0FE2		FSR1H
$0FE3		PLUSW1
$0FE4		PREINC1
$0FE5		POSTDEC1
$0FE6		POSTINC1
$0FE7		INDF1
$0FE8		WREG
$0FE9		FSR0L
$0FEA		FSR0H
$0FEB		PLUSW0
$0FEC		PREINC0
$0FED		POSTDEC0
$0FEE		POSTINC0
$0FEF		INDF0
$0FF3		PRODL
$0FF4		PRODH
$0FF5		TABLAT
$0FF6		TBLPTRL
$0FF7		TBLPTRH
$0FF8		TBLPTRU
$0FF9		PCL
$0FFA		PCLATH
$0FFB		PCLATU
$0FFD		TOSL
$0FFE		TOSH
$0FFF		TOSU


