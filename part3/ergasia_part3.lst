;  ASM code generated by mikroVirtualMachine for PIC - V. 8.0.0.0
;  Date/Time: 24/6/2020 12:14:22 рм
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$EF94	F002			GOTO	_main
$0008	$	_Delay_1us:
;Delays.c,7 :: 			void Delay_1us() {
;Delays.c,8 :: 			Delay_us(1);
$0008	$0000	    			NOP
$000A	$0000	    			NOP
;Delays.c,9 :: 			}
$000C	$0012	    			RETURN
$000E	$	_Delay_5500us:
;Delays.c,31 :: 			void Delay_5500us() {
;Delays.c,32 :: 			Delay_us(5500);
$000E	$0E0F	    			MOVLW	15
$0010	$6E0B	    			MOVWF	STACK_11, 0
$0012	$0EFF	    			MOVLW	255
$0014	$6E0A	    			MOVWF	STACK_10, 0
$0016	$2E0B	    			DECFSZ	STACK_11, F, 0
$0018	$D001	    			BRA	$+2
$001A	$D003	    			BRA	$+4
$001C	$2E0A	    			DECFSZ	STACK_10, F, 0
$001E	$D7FE	    			BRA	$-1
$0020	$D7FA	    			BRA	$-5
$0022	$0E3E	    			MOVLW	62
$0024	$6E0A	    			MOVWF	STACK_10, 0
$0026	$2E0A	    			DECFSZ	STACK_10, F, 0
$0028	$D7FE	    			BRA	$-1
;Delays.c,33 :: 			}
$002A	$0012	    			RETURN
$002C	$	_Delay_50us:
;Delays.c,19 :: 			void Delay_50us() {
;Delays.c,20 :: 			Delay_us(50);
$002C	$0E21	    			MOVLW	33
$002E	$6E0A	    			MOVWF	STACK_10, 0
$0030	$2E0A	    			DECFSZ	STACK_10, F, 0
$0032	$D7FE	    			BRA	$-1
;Delays.c,21 :: 			}
$0034	$0012	    			RETURN
$0036	$	_Lcd8_Cmd:
$0036	$C015	FFE9			MOVFF	Lcd8bit_main_global_dataAddress, FSR0L
$003A	$C016	FFEA			MOVFF	Lcd8bit_main_global_dataAddress+1, FSR0H
$003E	$C017	FFE1			MOVFF	Lcd8bit_main_global_ctrlAddress, FSR1L
$0042	$C018	FFE2			MOVFF	Lcd8bit_main_global_ctrlAddress+1, FSR1H
$0046	$6AEF	    			CLRF	INDF0, 0
$0048	$524E	    			MOVF	FARG_Lcd8_Cmd+0, 1, 0
$004A	$E000	    			BZ	L_Lcd8_Cmd_0
$004C	$	L_Lcd8_Cmd_0:
$004C	$BE4E	    			BTFSC	FARG_Lcd8_Cmd+0, 7, 0
$004E	$8EEF	    			BSF	INDF0, __LCD8_DB7, 0
$0050	$BC4E	    			BTFSC	FARG_Lcd8_Cmd+0, 6, 0
$0052	$8CEF	    			BSF	INDF0, __LCD8_DB6, 0
$0054	$BA4E	    			BTFSC	FARG_Lcd8_Cmd+0, 5, 0
$0056	$8AEF	    			BSF	INDF0, __LCD8_DB5, 0
$0058	$B84E	    			BTFSC	FARG_Lcd8_Cmd+0, 4, 0
$005A	$88EF	    			BSF	INDF0, __LCD8_DB4, 0
$005C	$B64E	    			BTFSC	FARG_Lcd8_Cmd+0, 3, 0
$005E	$86EF	    			BSF	INDF0, __LCD8_DB3, 0
$0060	$B44E	    			BTFSC	FARG_Lcd8_Cmd+0, 2, 0
$0062	$84EF	    			BSF	INDF0, __LCD8_DB2, 0
$0064	$B24E	    			BTFSC	FARG_Lcd8_Cmd+0, 1, 0
$0066	$82EF	    			BSF	INDF0, __LCD8_DB1, 0
$0068	$B04E	    			BTFSC	FARG_Lcd8_Cmd+0, 0, 0
$006A	$80EF	    			BSF	INDF0, __LCD8_DB0, 0
$006C	$5019	    			MOVF	Lcd8bit_main_global_cmd, 0, 0
$006E	$0A01	    			XORLW	1
$0070	$E103	    			BNZ	L_Lcd8_Cmd_1
$0072	$94E7	    			BCF	INDF1, __LCD8_RS, 0
$0074	$EF3D	F000			GOTO	L_Lcd8_Cmd_2
$0078	$	L_Lcd8_Cmd_1:
$0078	$84E7	    			BSF	INDF1, __LCD8_RS, 0
$007A	$	L_Lcd8_Cmd_2:
$007A	$82E7	    			BSF	INDF1, __LCD8_ENABLE, 0
$007C	$EC04	F000			CALL	_Delay_1us
$0080	$92E7	    			BCF	INDF1, __LCD8_ENABLE, 0
$0082	$5019	    			MOVF	Lcd8bit_main_global_cmd, 0, 0
$0084	$0A01	    			XORLW	1
$0086	$E103	    			BNZ	L_Lcd8_Cmd_3
$0088	$EC07	F000			CALL	_Delay_5500us
$008C	$D002	    			BRA	L_Lcd8_Cmd_4
$008E	$	L_Lcd8_Cmd_3:
$008E	$EC16	F000			CALL	_Delay_50us
$0092	$	L_Lcd8_Cmd_4:
$0092	$0012	    			RETURN
$0094	$	SoftI2C_PutZerosToLAT:
$0094	$0E09	    			MOVLW	9
$0096	$5C1A	    			SUBWF	___porti2c, 0, 0
$0098	$6EE1	    			MOVWF	FSR1L, 0
$009A	$0E0F	    			MOVLW	15
$009C	$6EE2	    			MOVWF	FSR1H, 0
$009E	$98E7	    			BCF	INDF1, ____sdai2c, 0
$00A0	$96E7	    			BCF	INDF1, ____scli2c, 0
$00A2	$0012	    			RETURN
$00A4	$	_LCD8_Out:
$00A4	$D00F	    			BRA	L_LCD8_Out_12
$00A6	$	L_LCD8_Out_14:
$00A6	$0E80	    			MOVLW	128
$00A8	$6E49	    			MOVWF	FARG_LCD8_Out+0, 0
$00AA	$D019	    			BRA	L_LCD8_Out_13
$00AC	$	L_LCD8_Out_15:
$00AC	$0EC0	    			MOVLW	192
$00AE	$6E49	    			MOVWF	FARG_LCD8_Out+0, 0
$00B0	$D016	    			BRA	L_LCD8_Out_13
$00B2	$	L_LCD8_Out_16:
$00B2	$0E94	    			MOVLW	148
$00B4	$6E49	    			MOVWF	FARG_LCD8_Out+0, 0
$00B6	$D013	    			BRA	L_LCD8_Out_13
$00B8	$	L_LCD8_Out_17:
$00B8	$0ED4	    			MOVLW	212
$00BA	$6E49	    			MOVWF	FARG_LCD8_Out+0, 0
$00BC	$D010	    			BRA	L_LCD8_Out_13
$00BE	$	L_LCD8_Out_18:
$00BE	$0E80	    			MOVLW	128
$00C0	$6E49	    			MOVWF	FARG_LCD8_Out+0, 0
$00C2	$D00D	    			BRA	L_LCD8_Out_13
$00C4	$	L_LCD8_Out_12:
$00C4	$5049	    			MOVF	FARG_LCD8_Out+0, 0, 0
$00C6	$0A01	    			XORLW	1
$00C8	$E0EE	    			BZ	L_LCD8_Out_14
$00CA	$5049	    			MOVF	FARG_LCD8_Out+0, 0, 0
$00CC	$0A02	    			XORLW	2
$00CE	$E0EE	    			BZ	L_LCD8_Out_15
$00D0	$5049	    			MOVF	FARG_LCD8_Out+0, 0, 0
$00D2	$0A03	    			XORLW	3
$00D4	$E0EE	    			BZ	L_LCD8_Out_16
$00D6	$5049	    			MOVF	FARG_LCD8_Out+0, 0, 0
$00D8	$0A04	    			XORLW	4
$00DA	$E0EE	    			BZ	L_LCD8_Out_17
$00DC	$D7F0	    			BRA	L_LCD8_Out_18
$00DE	$	L_LCD8_Out_13:
$00DE	$044A	    			DECF	FARG_LCD8_Out+1, 0, 0
$00E0	$6E00	    			MOVWF	STACK_0, 0
$00E2	$5049	    			MOVF	FARG_LCD8_Out+0, 0, 0
$00E4	$2600	    			ADDWF	STACK_0, 1, 0
$00E6	$C000	F049			MOVFF	STACK_0, FARG_LCD8_Out+0
$00EA	$0E01	    			MOVLW	1
$00EC	$6E19	    			MOVWF	Lcd8bit_main_global_cmd, 0
$00EE	$C000	F04E			MOVFF	STACK_0, FARG_Lcd8_Cmd+0
$00F2	$EC1B	F000			CALL	_Lcd8_Cmd
$00F6	$6A19	    			CLRF	Lcd8bit_main_global_cmd, 0
$00F8	$6A4D	    			CLRF	LCD8_Out_i_L0, 0
$00FA	$	L_LCD8_Out_19:
$00FA	$504D	    			MOVF	LCD8_Out_i_L0, 0, 0
$00FC	$244B	    			ADDWF	FARG_LCD8_Out+2, 0, 0
$00FE	$6EE9	    			MOVWF	FSR0L, 0
$0100	$0E00	    			MOVLW	0
$0102	$204C	    			ADDWFC	FARG_LCD8_Out+3, 0, 0
$0104	$6EEA	    			MOVWF	FSR0L+1, 0
$0106	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$010A	$5200	    			MOVF	STACK_0, 1, 0
$010C	$E00C	    			BZ	L_LCD8_Out_20
$010E	$504D	    			MOVF	LCD8_Out_i_L0, 0, 0
$0110	$244B	    			ADDWF	FARG_LCD8_Out+2, 0, 0
$0112	$6EE9	    			MOVWF	FSR0L, 0
$0114	$0E00	    			MOVLW	0
$0116	$204C	    			ADDWFC	FARG_LCD8_Out+3, 0, 0
$0118	$6EEA	    			MOVWF	FSR0L+1, 0
$011A	$CFEE	F04E			MOVFF	POSTINC0, FARG_Lcd8_Cmd+0
$011E	$EC1B	F000			CALL	_Lcd8_Cmd
$0122	$2A4D	    			INCF	LCD8_Out_i_L0, 1, 0
$0124	$D7EA	    			BRA	L_LCD8_Out_19
$0126	$	L_LCD8_Out_20:
$0126	$0E01	    			MOVLW	1
$0128	$6E19	    			MOVWF	Lcd8bit_main_global_cmd, 0
$012A	$0012	    			RETURN
$012C	$	_my_read_keypad:
;ergasia_part3.c,2 :: 			char  my_read_keypad()
;ergasia_part3.c,7 :: 			PORTD = 0xFF;      //initialize all pins in PORT D as 1
$012C	$0EFF	    			MOVLW	255
$012E	$6E83	    			MOVWF	PORTD, 0
;ergasia_part3.c,8 :: 			TRISD = 0xFF;      //configure PORTD is inpout
$0130	$0EFF	    			MOVLW	255
$0132	$6E95	    			MOVWF	TRISD, 0
;ergasia_part3.c,10 :: 			TRISB = 0x00;     //configure PORT B as outpout
$0134	$6A93	    			CLRF	TRISB, 0
;ergasia_part3.c,11 :: 			PORTB = 0xFF;     //set all pins of PORT B to 1;
$0136	$0EFF	    			MOVLW	255
$0138	$6E81	    			MOVWF	PORTB, 0
;ergasia_part3.c,13 :: 			key =0;
$013A	$6A4A	    			CLRF	my_read_keypad_key_L0, 0
;ergasia_part3.c,15 :: 			do {     //scan continuously until a key is pressed on the keypad.
$013C	$	L_my_read_keypad_0:
;ergasia_part3.c,18 :: 			PORTB.F0 = 0;
$013C	$9081	    			BCF	PORTB, 0, 0
;ergasia_part3.c,19 :: 			delay_ms(1);
$013E	$0E03	    			MOVLW	3
$0140	$6E0B	    			MOVWF	STACK_11, 0
$0142	$0EFF	    			MOVLW	255
$0144	$6E0A	    			MOVWF	STACK_10, 0
$0146	$2E0B	    			DECFSZ	STACK_11, F, 0
$0148	$D001	    			BRA	$+2
$014A	$D003	    			BRA	$+4
$014C	$2E0A	    			DECFSZ	STACK_10, F, 0
$014E	$D7FE	    			BRA	$-1
$0150	$D7FA	    			BRA	$-5
$0152	$0E96	    			MOVLW	150
$0154	$6E0A	    			MOVWF	STACK_10, 0
$0156	$2E0A	    			DECFSZ	STACK_10, F, 0
$0158	$D7FE	    			BRA	$-1
;ergasia_part3.c,20 :: 			var = PORTD;
$015A	$CF83	F049			MOVFF	PORTD, my_read_keypad_var_L0
;ergasia_part3.c,21 :: 			if (var.F0 == 0)      key = '<';
$015E	$0E01	    			MOVLW	1
$0160	$1449	    			ANDWF	my_read_keypad_var_L0, 0, 0
$0162	$6E01	    			MOVWF	STACK_1, 0
$0164	$5001	    			MOVF	STACK_1, 0, 0
$0166	$0A00	    			XORLW	0
$0168	$E103	    			BNZ	L_my_read_keypad_2
$016A	$0E3C	    			MOVLW	60
$016C	$6E4A	    			MOVWF	my_read_keypad_key_L0, 0
$016E	$D01A	    			BRA	L_my_read_keypad_3
$0170	$	L_my_read_keypad_2:
;ergasia_part3.c,22 :: 			else if (var.F1 == 0) key = '7';
$0170	$6A01	    			CLRF	STACK_1, 0
$0172	$B249	    			BTFSC	my_read_keypad_var_L0, 1, 0
$0174	$2A01	    			INCF	STACK_1, 1, 0
$0176	$5001	    			MOVF	STACK_1, 0, 0
$0178	$0A00	    			XORLW	0
$017A	$E103	    			BNZ	L_my_read_keypad_4
$017C	$0E37	    			MOVLW	55
$017E	$6E4A	    			MOVWF	my_read_keypad_key_L0, 0
$0180	$D011	    			BRA	L_my_read_keypad_5
$0182	$	L_my_read_keypad_4:
;ergasia_part3.c,23 :: 			else if (var.F2 == 0) key = '4';
$0182	$6A01	    			CLRF	STACK_1, 0
$0184	$B449	    			BTFSC	my_read_keypad_var_L0, 2, 0
$0186	$2A01	    			INCF	STACK_1, 1, 0
$0188	$5001	    			MOVF	STACK_1, 0, 0
$018A	$0A00	    			XORLW	0
$018C	$E103	    			BNZ	L_my_read_keypad_6
$018E	$0E34	    			MOVLW	52
$0190	$6E4A	    			MOVWF	my_read_keypad_key_L0, 0
$0192	$D008	    			BRA	L_my_read_keypad_7
$0194	$	L_my_read_keypad_6:
;ergasia_part3.c,24 :: 			else if (var.F3 == 0) key = '1';
$0194	$6A01	    			CLRF	STACK_1, 0
$0196	$B649	    			BTFSC	my_read_keypad_var_L0, 3, 0
$0198	$2A01	    			INCF	STACK_1, 1, 0
$019A	$5001	    			MOVF	STACK_1, 0, 0
$019C	$0A00	    			XORLW	0
$019E	$E102	    			BNZ	L_my_read_keypad_8
$01A0	$0E31	    			MOVLW	49
$01A2	$6E4A	    			MOVWF	my_read_keypad_key_L0, 0
$01A4	$	L_my_read_keypad_8:
$01A4	$	L_my_read_keypad_7:
$01A4	$	L_my_read_keypad_5:
$01A4	$	L_my_read_keypad_3:
;ergasia_part3.c,25 :: 			PORTB.F0 =1;    //restore RB0 to 1.
$01A4	$8081	    			BSF	PORTB, 0, 0
;ergasia_part3.c,28 :: 			PORTB.F1 = 0;
$01A6	$9281	    			BCF	PORTB, 1, 0
;ergasia_part3.c,29 :: 			delay_ms(1);
$01A8	$0E03	    			MOVLW	3
$01AA	$6E0B	    			MOVWF	STACK_11, 0
$01AC	$0EFF	    			MOVLW	255
$01AE	$6E0A	    			MOVWF	STACK_10, 0
$01B0	$2E0B	    			DECFSZ	STACK_11, F, 0
$01B2	$D001	    			BRA	$+2
$01B4	$D003	    			BRA	$+4
$01B6	$2E0A	    			DECFSZ	STACK_10, F, 0
$01B8	$D7FE	    			BRA	$-1
$01BA	$D7FA	    			BRA	$-5
$01BC	$0E96	    			MOVLW	150
$01BE	$6E0A	    			MOVWF	STACK_10, 0
$01C0	$2E0A	    			DECFSZ	STACK_10, F, 0
$01C2	$D7FE	    			BRA	$-1
;ergasia_part3.c,30 :: 			var = PORTD;
$01C4	$CF83	F049			MOVFF	PORTD, my_read_keypad_var_L0
;ergasia_part3.c,31 :: 			if (var.F0 == 0)      key = '0';
$01C8	$0E01	    			MOVLW	1
$01CA	$1449	    			ANDWF	my_read_keypad_var_L0, 0, 0
$01CC	$6E01	    			MOVWF	STACK_1, 0
$01CE	$5001	    			MOVF	STACK_1, 0, 0
$01D0	$0A00	    			XORLW	0
$01D2	$E103	    			BNZ	L_my_read_keypad_9
$01D4	$0E30	    			MOVLW	48
$01D6	$6E4A	    			MOVWF	my_read_keypad_key_L0, 0
$01D8	$D01A	    			BRA	L_my_read_keypad_10
$01DA	$	L_my_read_keypad_9:
;ergasia_part3.c,32 :: 			else if (var.F1 == 0) key = '8';
$01DA	$6A01	    			CLRF	STACK_1, 0
$01DC	$B249	    			BTFSC	my_read_keypad_var_L0, 1, 0
$01DE	$2A01	    			INCF	STACK_1, 1, 0
$01E0	$5001	    			MOVF	STACK_1, 0, 0
$01E2	$0A00	    			XORLW	0
$01E4	$E103	    			BNZ	L_my_read_keypad_11
$01E6	$0E38	    			MOVLW	56
$01E8	$6E4A	    			MOVWF	my_read_keypad_key_L0, 0
$01EA	$D011	    			BRA	L_my_read_keypad_12
$01EC	$	L_my_read_keypad_11:
;ergasia_part3.c,33 :: 			else if (var.F2 == 0) key = '5';
$01EC	$6A01	    			CLRF	STACK_1, 0
$01EE	$B449	    			BTFSC	my_read_keypad_var_L0, 2, 0
$01F0	$2A01	    			INCF	STACK_1, 1, 0
$01F2	$5001	    			MOVF	STACK_1, 0, 0
$01F4	$0A00	    			XORLW	0
$01F6	$E103	    			BNZ	L_my_read_keypad_13
$01F8	$0E35	    			MOVLW	53
$01FA	$6E4A	    			MOVWF	my_read_keypad_key_L0, 0
$01FC	$D008	    			BRA	L_my_read_keypad_14
$01FE	$	L_my_read_keypad_13:
;ergasia_part3.c,34 :: 			else if (var.F3 == 0) key = '2';
$01FE	$6A01	    			CLRF	STACK_1, 0
$0200	$B649	    			BTFSC	my_read_keypad_var_L0, 3, 0
$0202	$2A01	    			INCF	STACK_1, 1, 0
$0204	$5001	    			MOVF	STACK_1, 0, 0
$0206	$0A00	    			XORLW	0
$0208	$E102	    			BNZ	L_my_read_keypad_15
$020A	$0E32	    			MOVLW	50
$020C	$6E4A	    			MOVWF	my_read_keypad_key_L0, 0
$020E	$	L_my_read_keypad_15:
$020E	$	L_my_read_keypad_14:
$020E	$	L_my_read_keypad_12:
$020E	$	L_my_read_keypad_10:
;ergasia_part3.c,35 :: 			PORTB.F1 =1;   //restore RB1 to 1
$020E	$8281	    			BSF	PORTB, 1, 0
;ergasia_part3.c,38 :: 			PORTB.F2 =0;
$0210	$9481	    			BCF	PORTB, 2, 0
;ergasia_part3.c,39 :: 			delay_ms(1);
$0212	$0E03	    			MOVLW	3
$0214	$6E0B	    			MOVWF	STACK_11, 0
$0216	$0EFF	    			MOVLW	255
$0218	$6E0A	    			MOVWF	STACK_10, 0
$021A	$2E0B	    			DECFSZ	STACK_11, F, 0
$021C	$D001	    			BRA	$+2
$021E	$D003	    			BRA	$+4
$0220	$2E0A	    			DECFSZ	STACK_10, F, 0
$0222	$D7FE	    			BRA	$-1
$0224	$D7FA	    			BRA	$-5
$0226	$0E96	    			MOVLW	150
$0228	$6E0A	    			MOVWF	STACK_10, 0
$022A	$2E0A	    			DECFSZ	STACK_10, F, 0
$022C	$D7FE	    			BRA	$-1
;ergasia_part3.c,40 :: 			var = PORTD;
$022E	$CF83	F049			MOVFF	PORTD, my_read_keypad_var_L0
;ergasia_part3.c,41 :: 			if (var.F0 == 0)      key = '>';
$0232	$0E01	    			MOVLW	1
$0234	$1449	    			ANDWF	my_read_keypad_var_L0, 0, 0
$0236	$6E01	    			MOVWF	STACK_1, 0
$0238	$5001	    			MOVF	STACK_1, 0, 0
$023A	$0A00	    			XORLW	0
$023C	$E103	    			BNZ	L_my_read_keypad_16
$023E	$0E3E	    			MOVLW	62
$0240	$6E4A	    			MOVWF	my_read_keypad_key_L0, 0
$0242	$D01A	    			BRA	L_my_read_keypad_17
$0244	$	L_my_read_keypad_16:
;ergasia_part3.c,42 :: 			else if (var.F1 == 0) key = '9';
$0244	$6A01	    			CLRF	STACK_1, 0
$0246	$B249	    			BTFSC	my_read_keypad_var_L0, 1, 0
$0248	$2A01	    			INCF	STACK_1, 1, 0
$024A	$5001	    			MOVF	STACK_1, 0, 0
$024C	$0A00	    			XORLW	0
$024E	$E103	    			BNZ	L_my_read_keypad_18
$0250	$0E39	    			MOVLW	57
$0252	$6E4A	    			MOVWF	my_read_keypad_key_L0, 0
$0254	$D011	    			BRA	L_my_read_keypad_19
$0256	$	L_my_read_keypad_18:
;ergasia_part3.c,43 :: 			else if (var.F2 == 0) key = '6';
$0256	$6A01	    			CLRF	STACK_1, 0
$0258	$B449	    			BTFSC	my_read_keypad_var_L0, 2, 0
$025A	$2A01	    			INCF	STACK_1, 1, 0
$025C	$5001	    			MOVF	STACK_1, 0, 0
$025E	$0A00	    			XORLW	0
$0260	$E103	    			BNZ	L_my_read_keypad_20
$0262	$0E36	    			MOVLW	54
$0264	$6E4A	    			MOVWF	my_read_keypad_key_L0, 0
$0266	$D008	    			BRA	L_my_read_keypad_21
$0268	$	L_my_read_keypad_20:
;ergasia_part3.c,44 :: 			else if (var.F3 == 0) key = '3';
$0268	$6A01	    			CLRF	STACK_1, 0
$026A	$B649	    			BTFSC	my_read_keypad_var_L0, 3, 0
$026C	$2A01	    			INCF	STACK_1, 1, 0
$026E	$5001	    			MOVF	STACK_1, 0, 0
$0270	$0A00	    			XORLW	0
$0272	$E102	    			BNZ	L_my_read_keypad_22
$0274	$0E33	    			MOVLW	51
$0276	$6E4A	    			MOVWF	my_read_keypad_key_L0, 0
$0278	$	L_my_read_keypad_22:
$0278	$	L_my_read_keypad_21:
$0278	$	L_my_read_keypad_19:
$0278	$	L_my_read_keypad_17:
;ergasia_part3.c,45 :: 			PORTB.F2 =1;  //restore RB2 to 1
$0278	$8481	    			BSF	PORTB, 2, 0
;ergasia_part3.c,46 :: 			} while (key == 0);
$027A	$504A	    			MOVF	my_read_keypad_key_L0, 0, 0
$027C	$0A00	    			XORLW	0
$027E	$B4D8	    			BTFSC	STATUS, Z, 0
$0280	$D75D	    			BRA	L_my_read_keypad_0
$0282	$	L_my_read_keypad_1:
;ergasia_part3.c,48 :: 			return key;
$0282	$C04A	F000			MOVFF	my_read_keypad_key_L0, STACK_0
;ergasia_part3.c,49 :: 			}
$0286	$0012	    			RETURN
$0288	$	_Soft_I2C_Start:
$0288	$C01A	FFE9			MOVFF	___porti2c, FSR0L
$028C	$0E0F	    			MOVLW	15
$028E	$6EEA	    			MOVWF	FSR0H, 0
$0290	$88EF	    			BSF	INDF0, ____sdai2c, 0
$0292	$EC04	F000			CALL	_Delay_1us
$0296	$86EF	    			BSF	INDF0, ____scli2c, 0
$0298	$EC04	F000			CALL	_Delay_1us
$029C	$EC4A	F000			CALL	SoftI2C_PutZerosToLAT
$02A0	$98EF	    			BCF	INDF0, ____sdai2c, 0
$02A2	$EC04	F000			CALL	_Delay_1us
$02A6	$EC4A	F000			CALL	SoftI2C_PutZerosToLAT
$02AA	$96EF	    			BCF	INDF0, ____scli2c, 0
$02AC	$0012	    			RETURN
$02AE	$	_Soft_I2C_Write:
$02AE	$0E01	    			MOVLW	1
$02B0	$6E4B	    			MOVWF	Soft_I2C_Write_result_L0, 0
$02B2	$0E08	    			MOVLW	8
$02B4	$6E4A	    			MOVWF	Soft_I2C_Write_temp_L0, 0
$02B6	$C01A	FFE9			MOVFF	___porti2c, FSR0L
$02BA	$0E0F	    			MOVLW	15
$02BC	$6EEA	    			MOVWF	FSR0H, 0
$02BE	$	L_Soft_I2C_Write_4:
$02BE	$524A	    			MOVF	Soft_I2C_Write_temp_L0, 1, 0
$02C0	$E022	    			BZ	L_Soft_I2C_Write_5
$02C2	$EC04	F000			CALL	_Delay_1us
$02C6	$EC04	F000			CALL	_Delay_1us
$02CA	$EC4A	F000			CALL	SoftI2C_PutZerosToLAT
$02CE	$96EF	    			BCF	INDF0, ____scli2c, 0
$02D0	$EC04	F000			CALL	_Delay_1us
$02D4	$5249	    			MOVF	FARG_Soft_I2C_Write+0, 1, 0
$02D6	$E000	    			BZ	L_Soft_I2C_Write_6
$02D8	$	L_Soft_I2C_Write_6:
$02D8	$EC4A	F000			CALL	SoftI2C_PutZerosToLAT
$02DC	$3649	    			RLCF	FARG_soft_i2c_write+0, F, 0
$02DE	$A0D8	    			BTFSS	STATUS, 0, 0
$02E0	$EF75	F001			GOTO	l_018
$02E4	$88EF	    			BSF	INDF0, ____sdai2c, 0
$02E6	$EF76	F001			GOTO	l_01C
$02EA	$	l_018:
$02EA	$98EF	    			BCF	INDF0, ____sdai2c, 0
$02EC	$	l_01C:
$02EC	$0000	    			NOP
$02EE	$EC04	F000			CALL	_Delay_1us
$02F2	$86EF	    			BSF	INDF0, ____scli2c, 0
$02F4	$0E12	    			MOVLW	18
$02F6	$5EE9	    			SUBWF	FSR0L, F, 0
$02F8	$A6EF	    			BTFSS	INDF0, ____scli2c, 0
$02FA	$EF7C	F001			GOTO	$-1
$02FE	$0E12	    			MOVLW	18
$0300	$26E9	    			ADDWF	FSR0L, F, 0
$0302	$064A	    			DECF	Soft_I2C_Write_temp_L0, 1, 0
$0304	$D7DC	    			BRA	L_Soft_I2C_Write_4
$0306	$	L_Soft_I2C_Write_5:
$0306	$6A4B	    			CLRF	Soft_I2C_Write_result_L0, 0
$0308	$EC04	F000			CALL	_Delay_1us
$030C	$EC4A	F000			CALL	SoftI2C_PutZerosToLAT
$0310	$0000	    			NOP
$0312	$96EF	    			BCF	INDF0, ____scli2c, 0
$0314	$EC04	F000			CALL	_Delay_1us
$0318	$88EF	    			BSF	INDF0, ____sdai2c, 0
$031A	$EC04	F000			CALL	_Delay_1us
$031E	$EC04	F000			CALL	_Delay_1us
$0322	$524B	    			MOVF	Soft_I2C_Write_result_L0, 1, 0
$0324	$E000	    			BZ	L_Soft_I2C_Write_7
$0326	$	L_Soft_I2C_Write_7:
$0326	$86EF	    			BSF	INDF0, ____scli2c, 0
$0328	$0E12	    			MOVLW	18
$032A	$5EE9	    			SUBWF	FSR0L, F, 0
$032C	$A6EF	    			BTFSS	INDF0, ____scli2c, 0
$032E	$EF96	F001			GOTO	$-1
$0332	$6A4B	    			CLRF	FLOC_soft_i2c_write+1, 0
$0334	$EC04	F000			CALL	_Delay_1us
$0338	$B8EF	    			BTFSC	INDF0, ____sdai2c, 0
$033A	$804B	    			BSF	FLOC_soft_i2c_write+1, 0, 0
$033C	$EC04	F000			CALL	_Delay_1us
$0340	$EC04	F000			CALL	_Delay_1us
$0344	$EC04	F000			CALL	_Delay_1us
$0348	$EC04	F000			CALL	_Delay_1us
$034C	$EC04	F000			CALL	_Delay_1us
$0350	$EC04	F000			CALL	_Delay_1us
$0354	$EC04	F000			CALL	_Delay_1us
$0358	$EC04	F000			CALL	_Delay_1us
$035C	$EC4A	F000			CALL	SoftI2C_PutZerosToLAT
$0360	$0E12	    			MOVLW	18
$0362	$26E9	    			ADDWF	FSR0L, F, 0
$0364	$96EF	    			BCF	INDF0, ____scli2c, 0
$0366	$98EF	    			BCF	INDF0, ____sdai2c, 0
$0368	$C04B	F000			MOVFF	Soft_I2C_Write_result_L0, STACK_0
$036C	$0012	    			RETURN
$036E	$	_Soft_I2C_Stop:
$036E	$C01A	FFE9			MOVFF	___porti2c, FSR0L
$0372	$0E0F	    			MOVLW	15
$0374	$6EEA	    			MOVWF	FSR0H, 0
$0376	$EC4A	F000			CALL	SoftI2C_PutZerosToLAT
$037A	$98EF	    			BCF	INDF0, ____sdai2c, 0
$037C	$EC04	F000			CALL	_Delay_1us
$0380	$86EF	    			BSF	INDF0, ____scli2c, 0
$0382	$0E12	    			MOVLW	18
$0384	$5EE9	    			SUBWF	FSR0L, F, 0
$0386	$A6EF	    			BTFSS	INDF0, ____scli2c, 0
$0388	$EFC3	F001			GOTO	$-1
$038C	$0E12	    			MOVLW	18
$038E	$26E9	    			ADDWF	FSR0L, F, 0
$0390	$EC04	F000			CALL	_Delay_1us
$0394	$EC04	F000			CALL	_Delay_1us
$0398	$EC04	F000			CALL	_Delay_1us
$039C	$EC04	F000			CALL	_Delay_1us
$03A0	$88EF	    			BSF	INDF0, ____sdai2c, 0
$03A2	$EC04	F000			CALL	_Delay_1us
$03A6	$0012	    			RETURN
$03A8	$	_Soft_I2C_Read:
$03A8	$6A4A	    			CLRF	Soft_I2C_Read_result_L0, 0
$03AA	$0E08	    			MOVLW	8
$03AC	$6E4B	    			MOVWF	Soft_I2C_Read_temp_L0, 0
$03AE	$C01A	FFE9			MOVFF	___porti2c, FSR0L
$03B2	$0E0F	    			MOVLW	15
$03B4	$6EEA	    			MOVWF	FSR0H, 0
$03B6	$	L_Soft_I2C_Read_0:
$03B6	$524B	    			MOVF	Soft_I2C_Read_temp_L0, 1, 0
$03B8	$E01C	    			BZ	L_Soft_I2C_Read_1
$03BA	$EC04	F000			CALL	_Delay_1us
$03BE	$0000	    			NOP
$03C0	$88EF	    			BSF	INDF0, ____sdai2c, 0
$03C2	$EC04	F000			CALL	_Delay_1us
$03C6	$524A	    			MOVF	Soft_I2C_Read_result_L0, 1, 0
$03C8	$E000	    			BZ	L_Soft_I2C_Read_2
$03CA	$	L_Soft_I2C_Read_2:
$03CA	$86EF	    			BSF	INDF0, ____scli2c, 0
$03CC	$0E12	    			MOVLW	18
$03CE	$5EE9	    			SUBWF	FSR0L, F, 0
$03D0	$A6EF	    			BTFSS	INDF0, ____scli2c, 0
$03D2	$EFE8	F001			GOTO	$-1
$03D6	$B8EF	    			BTFSC	INDF0, ____sdai2c, 0
$03D8	$80D8	    			BSF	STATUS, C, 0
$03DA	$A8EF	    			BTFSS	INDF0, ____sdai2c, 0
$03DC	$90D8	    			BCF	STATUS, C, 0
$03DE	$364A	    			RLCF	FLOC_soft_i2c_read+0, F, 0
$03E0	$EC04	F000			CALL	_Delay_1us
$03E4	$EC4A	F000			CALL	SoftI2C_PutZerosToLAT
$03E8	$0E12	    			MOVLW	18
$03EA	$26E9	    			ADDWF	FSR0L, F, 0
$03EC	$96EF	    			BCF	INDF0, ____scli2c, 0
$03EE	$064B	    			DECF	Soft_I2C_Read_temp_L0, 1, 0
$03F0	$D7E2	    			BRA	L_Soft_I2C_Read_0
$03F2	$	L_Soft_I2C_Read_1:
$03F2	$88EF	    			BSF	INDF0, ____sdai2c, 0
$03F4	$EC04	F000			CALL	_Delay_1us
$03F8	$5249	    			MOVF	FARG_Soft_I2C_Read+0, 1, 0
$03FA	$E002	    			BZ	L_Soft_I2C_Read_3
$03FC	$EC4A	F000			CALL	SoftI2C_PutZerosToLAT
$0400	$	L_Soft_I2C_Read_3:
$0400	$5049	    			MOVF	FARG_soft_i2c_read+0, W, 0
$0402	$B4D8	    			BTFSC	STATUS, 2, 0
$0404	$EF05	F002			GOTO	L_07C
$0408	$98EF	    			BCF	INDF0, ____sdai2c, 0
$040A	$	L_07C:
$040A	$0000	    			NOP
$040C	$EC04	F000			CALL	_Delay_1us
$0410	$86EF	    			BSF	INDF0, ____scli2c, 0
$0412	$0E12	    			MOVLW	18
$0414	$5EE9	    			SUBWF	FSR0L, F, 0
$0416	$A6EF	    			BTFSS	INDF0, ____scli2c, 0
$0418	$EF0B	F002			GOTO	$-1
$041C	$0E12	    			MOVLW	18
$041E	$26E9	    			ADDWF	FSR0L, F, 0
$0420	$EC04	F000			CALL	_Delay_1us
$0424	$EC4A	F000			CALL	SoftI2C_PutZerosToLAT
$0428	$96EF	    			BCF	INDF0, ____scli2c, 0
$042A	$EC04	F000			CALL	_Delay_1us
$042E	$EC4A	F000			CALL	SoftI2C_PutZerosToLAT
$0432	$98EF	    			BCF	INDF0, ____sdai2c, 0
$0434	$C04A	F000			MOVFF	Soft_I2C_Read_result_L0, STACK_0
$0438	$0012	    			RETURN
$043A	$	_Usart_Write:
$043A	$	L_Usart_Write_3:
$043A	$6A01	    			CLRF	STACK_1, 0
$043C	$B2AC	    			BTFSC	TXSTA, 1, 0
$043E	$2A01	    			INCF	STACK_1, 1, 0
$0440	$5001	    			MOVF	STACK_1, 0, 0
$0442	$0A00	    			XORLW	0
$0444	$E102	    			BNZ	L_Usart_Write_4
$0446	$0000	    			NOP
$0448	$D7F8	    			BRA	L_Usart_Write_3
$044A	$	L_Usart_Write_4:
$044A	$C049	FFAD			MOVFF	FARG_Usart_Write+0, TXREG
$044E	$0012	    			RETURN
$0450	$	_Lcd8_Init:
$0450	$EC07	F000			CALL	_Delay_5500us
$0454	$EC07	F000			CALL	_Delay_5500us
$0458	$EC07	F000			CALL	_Delay_5500us
$045C	$C04B	F015			MOVFF	FARG_Lcd8_Init+2, Lcd8bit_main_global_dataAddress
$0460	$C04C	F016			MOVFF	FARG_Lcd8_Init+3, Lcd8bit_main_global_dataAddress+1
$0464	$C049	F017			MOVFF	FARG_Lcd8_Init+0, Lcd8bit_main_global_ctrlAddress
$0468	$C04A	F018			MOVFF	FARG_Lcd8_Init+1, Lcd8bit_main_global_ctrlAddress+1
$046C	$C049	FFE9			MOVFF	FARG_Lcd8_Init+0, FSR0L
$0470	$C04A	FFEA			MOVFF	FARG_Lcd8_Init+1, FSR0H
$0474	$90EF	    			BCF	INDF0, __LCD8_RW, 0
$0476	$C04B	FFE1			MOVFF	FARG_Lcd8_Init+2, FSR1L
$047A	$C04C	FFE2			MOVFF	FARG_Lcd8_Init+3, FSR1H
$047E	$6AE6	    			CLRF	POSTINC1, 0
$0480	$0E11	    			MOVLW	17
$0482	$24E1	    			ADDWF	FSR1L, 0, 0
$0484	$6E00	    			MOVWF	STACK_0, 0
$0486	$C000	FFE1			MOVFF	STACK_0, FSR1L
$048A	$6AE7	    			CLRF	INDF1, 0
$048C	$0E12	    			MOVLW	18
$048E	$5C00	    			SUBWF	STACK_0, 0, 0
$0490	$6EE1	    			MOVWF	FSR1L, 0
$0492	$0E12	    			MOVLW	18
$0494	$26E9	    			ADDWF	FSR0L, 1, 0
$0496	$92EF	    			BCF	INDF0, __LCD8_ENABLE, 0
$0498	$94EF	    			BCF	INDF0, __LCD8_RS, 0
$049A	$90EF	    			BCF	INDF0, __LCD8_RW, 0
$049C	$0E12	    			MOVLW	18
$049E	$5EE9	    			SUBWF	FSR0L, 1, 0
$04A0	$94EF	    			BCF	INDF0, __LCD8_RS, 0
$04A2	$92EF	    			BCF	INDF0, __LCD8_ENABLE, 0
$04A4	$90EF	    			BCF	INDF0, __LCD8_RW, 0
$04A6	$0E30	    			MOVLW	48
$04A8	$6E4E	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$04AA	$EC1B	F000			CALL	_Lcd8_Cmd
$04AE	$0E30	    			MOVLW	48
$04B0	$6E4E	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$04B2	$EC1B	F000			CALL	_Lcd8_Cmd
$04B6	$0E30	    			MOVLW	48
$04B8	$6E4E	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$04BA	$EC1B	F000			CALL	_Lcd8_Cmd
$04BE	$0E38	    			MOVLW	56
$04C0	$6E4E	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$04C2	$EC1B	F000			CALL	_Lcd8_Cmd
$04C6	$0E08	    			MOVLW	8
$04C8	$6E4E	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$04CA	$EC1B	F000			CALL	_Lcd8_Cmd
$04CE	$0E01	    			MOVLW	1
$04D0	$6E4E	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$04D2	$EC1B	F000			CALL	_Lcd8_Cmd
$04D6	$0E06	    			MOVLW	6
$04D8	$6E4E	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$04DA	$EC1B	F000			CALL	_Lcd8_Cmd
$04DE	$0E0C	    			MOVLW	12
$04E0	$6E4E	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$04E2	$EC1B	F000			CALL	_Lcd8_Cmd
$04E6	$0E01	    			MOVLW	1
$04E8	$6E19	    			MOVWF	Lcd8bit_main_global_cmd, 0
$04EA	$0012	    			RETURN
$04EC	$	_Soft_I2C_Init:
$04EC	$C049	FFE9			MOVFF	FARG_Soft_I2C_Init+0, FSR0L
$04F0	$C04A	FFEA			MOVFF	FARG_Soft_I2C_Init+1, FSR0H
$04F4	$0E12	    			MOVLW	18
$04F6	$2449	    			ADDWF	FARG_Soft_I2C_Init+0, 0, 0
$04F8	$6E00	    			MOVWF	STACK_0, 0
$04FA	$C000	F01A			MOVFF	STACK_0, ___porti2c
$04FE	$C000	FFE9			MOVFF	STACK_0, FSR0L
$0502	$88EF	    			BSF	INDF0, ____sdai2c, 0
$0504	$86EF	    			BSF	INDF0, ____scli2c, 0
$0506	$0E12	    			MOVLW	18
$0508	$5EE9	    			SUBWF	FSR0L, 1, 0
$050A	$A6EF	    			BTFSS	INDF0, ____scli2c, 0
$050C	$EF85	F002			GOTO	$-1
$0510	$0012	    			RETURN
$0512	$	_Usart_Init:
$0512	$8AAC	    			BSF	TXSTA, 5, 0
$0514	$0E90	    			MOVLW	144
$0516	$6EAB	    			MOVWF	RCSTA, 0
$0518	$8E94	    			BSF	TRISC, 7, 0
$051A	$9C94	    			BCF	TRISC, 6, 0
$051C	$	L_Usart_Init_0:
$051C	$AA9E	    			BTFSS	PIR1, 5, 0
$051E	$D003	    			BRA	L_Usart_Init_1
$0520	$CFAE	F04D			MOVFF	RCREG, Usart_Init_tmp_L0
$0524	$D7FB	    			BRA	L_Usart_Init_0
$0526	$	L_Usart_Init_1:
$0526	$0012	    			RETURN
$0528	$	_main:
$0528	$0E50	    			MOVLW	80
$052A	$6E26	    			MOVWF	lstr1_ergasia_part3+0, 0
$052C	$0E61	    			MOVLW	97
$052E	$6E27	    			MOVWF	lstr1_ergasia_part3+1, 0
$0530	$0E74	    			MOVLW	116
$0532	$6E28	    			MOVWF	lstr1_ergasia_part3+2, 0
$0534	$0E69	    			MOVLW	105
$0536	$6E29	    			MOVWF	lstr1_ergasia_part3+3, 0
$0538	$0E73	    			MOVLW	115
$053A	$6E2A	    			MOVWF	lstr1_ergasia_part3+4, 0
$053C	$0E74	    			MOVLW	116
$053E	$6E2B	    			MOVWF	lstr1_ergasia_part3+5, 0
$0540	$0E65	    			MOVLW	101
$0542	$6E2C	    			MOVWF	lstr1_ergasia_part3+6, 0
$0544	$0E20	    			MOVLW	32
$0546	$6E2D	    			MOVWF	lstr1_ergasia_part3+7, 0
$0548	$0E74	    			MOVLW	116
$054A	$6E2E	    			MOVWF	lstr1_ergasia_part3+8, 0
$054C	$0E6F	    			MOVLW	111
$054E	$6E2F	    			MOVWF	lstr1_ergasia_part3+9, 0
$0550	$0E20	    			MOVLW	32
$0552	$6E30	    			MOVWF	lstr1_ergasia_part3+10, 0
$0554	$0E34	    			MOVLW	52
$0556	$6E31	    			MOVWF	lstr1_ergasia_part3+11, 0
$0558	$0E20	    			MOVLW	32
$055A	$6E32	    			MOVWF	lstr1_ergasia_part3+12, 0
$055C	$6A33	    			CLRF	lstr1_ergasia_part3+13, 0
$055E	$0E47	    			MOVLW	71
$0560	$6E34	    			MOVWF	lstr2_ergasia_part3+0, 0
$0562	$0E69	    			MOVLW	105
$0564	$6E35	    			MOVWF	lstr2_ergasia_part3+1, 0
$0566	$0E61	    			MOVLW	97
$0568	$6E36	    			MOVWF	lstr2_ergasia_part3+2, 0
$056A	$0E20	    			MOVLW	32
$056C	$6E37	    			MOVWF	lstr2_ergasia_part3+3, 0
$056E	$0E6E	    			MOVLW	110
$0570	$6E38	    			MOVWF	lstr2_ergasia_part3+4, 0
$0572	$0E61	    			MOVLW	97
$0574	$6E39	    			MOVWF	lstr2_ergasia_part3+5, 0
$0576	$0E20	    			MOVLW	32
$0578	$6E3A	    			MOVWF	lstr2_ergasia_part3+6, 0
$057A	$0E78	    			MOVLW	120
$057C	$6E3B	    			MOVWF	lstr2_ergasia_part3+7, 0
$057E	$0E65	    			MOVLW	101
$0580	$6E3C	    			MOVWF	lstr2_ergasia_part3+8, 0
$0582	$0E6B	    			MOVLW	107
$0584	$6E3D	    			MOVWF	lstr2_ergasia_part3+9, 0
$0586	$0E69	    			MOVLW	105
$0588	$6E3E	    			MOVWF	lstr2_ergasia_part3+10, 0
$058A	$0E6E	    			MOVLW	110
$058C	$6E3F	    			MOVWF	lstr2_ergasia_part3+11, 0
$058E	$0E69	    			MOVLW	105
$0590	$6E40	    			MOVWF	lstr2_ergasia_part3+12, 0
$0592	$0E73	    			MOVLW	115
$0594	$6E41	    			MOVWF	lstr2_ergasia_part3+13, 0
$0596	$0E65	    			MOVLW	101
$0598	$6E42	    			MOVWF	lstr2_ergasia_part3+14, 0
$059A	$0E69	    			MOVLW	105
$059C	$6E43	    			MOVWF	lstr2_ergasia_part3+15, 0
$059E	$6A44	    			CLRF	lstr2_ergasia_part3+16, 0
;ergasia_part3.c,53 :: 			void main() {
;ergasia_part3.c,57 :: 			Lcd8_Config(&PORTE, &PORTD, 2,1,0,7,6, 5, 4, 3, 2, 1, 0); // Lcd_Init_EP5, see Autocomplete
$05A0	$0E84	    			MOVLW	PORTE
$05A2	$6E49	    			MOVWF	FARG_Lcd8_Init+0, 0
$05A4	$0E0F	    			MOVLW	@PORTE
$05A6	$6E4A	    			MOVWF	FARG_Lcd8_Init+1, 0
$05A8	$0E83	    			MOVLW	PORTD
$05AA	$6E4B	    			MOVWF	FARG_Lcd8_Init+2, 0
$05AC	$0E0F	    			MOVLW	@PORTD
$05AE	$6E4C	    			MOVWF	FARG_Lcd8_Init+3, 0
$05B0	$EC28	F002			CALL	_Lcd8_Init
;ergasia_part3.c,58 :: 			LCD8_Cmd(LCD_CURSOR_OFF);                                 // send command to LCD (cursor off)
$05B4	$0E0C	    			MOVLW	12
$05B6	$6E4E	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$05B8	$EC1B	F000			CALL	_Lcd8_Cmd
;ergasia_part3.c,59 :: 			LCD8_Cmd(LCD_CLEAR);
$05BC	$0E01	    			MOVLW	1
$05BE	$6E4E	    			MOVWF	FARG_Lcd8_Cmd+0, 0
$05C0	$EC1B	F000			CALL	_Lcd8_Cmd
;ergasia_part3.c,60 :: 			text="Patiste to 4 " ;
$05C4	$0E26	    			MOVLW	lstr1_ergasia_part3
$05C6	$6E45	    			MOVWF	main_text_L0, 0
$05C8	$0E00	    			MOVLW	@lstr1_ergasia_part3
$05CA	$6E46	    			MOVWF	main_text_L0+1, 0
;ergasia_part3.c,61 :: 			text1="Gia na xekinisei";
$05CC	$0E34	    			MOVLW	lstr2_ergasia_part3
$05CE	$6E47	    			MOVWF	main_text1_L0, 0
$05D0	$0E00	    			MOVLW	@lstr2_ergasia_part3
$05D2	$6E48	    			MOVWF	main_text1_L0+1, 0
;ergasia_part3.c,62 :: 			LCD8_Out(1,1,text);
$05D4	$0E01	    			MOVLW	1
$05D6	$6E49	    			MOVWF	FARG_LCD8_Out+0, 0
$05D8	$0E01	    			MOVLW	1
$05DA	$6E4A	    			MOVWF	FARG_LCD8_Out+1, 0
$05DC	$C045	F04B			MOVFF	main_text_L0, FARG_LCD8_Out+2
$05E0	$C046	F04C			MOVFF	main_text_L0+1, FARG_LCD8_Out+3
$05E4	$EC52	F000			CALL	_LCD8_Out
;ergasia_part3.c,63 :: 			LCD8_Out(2,1,text1);
$05E8	$0E02	    			MOVLW	2
$05EA	$6E49	    			MOVWF	FARG_LCD8_Out+0, 0
$05EC	$0E01	    			MOVLW	1
$05EE	$6E4A	    			MOVWF	FARG_LCD8_Out+1, 0
$05F0	$C047	F04B			MOVFF	main_text1_L0, FARG_LCD8_Out+2
$05F4	$C048	F04C			MOVFF	main_text1_L0+1, FARG_LCD8_Out+3
$05F8	$EC52	F000			CALL	_LCD8_Out
;ergasia_part3.c,65 :: 			keypressed=my_read_keypad();
$05FC	$EC96	F000			CALL	_my_read_keypad
;ergasia_part3.c,69 :: 			Soft_I2C_Config(&PORTC, 4, 3);                           //arxikopoiw
$0600	$0E82	    			MOVLW	PORTC
$0602	$6E49	    			MOVWF	FARG_Soft_I2C_Init+0, 0
$0604	$0E0F	    			MOVLW	@PORTC
$0606	$6E4A	    			MOVWF	FARG_Soft_I2C_Init+1, 0
$0608	$EC76	F002			CALL	_Soft_I2C_Init
;ergasia_part3.c,70 :: 			Soft_I2C_Start();                                        // Issue I2C start signal
$060C	$EC44	F001			CALL	_Soft_I2C_Start
;ergasia_part3.c,71 :: 			Soft_I2C_Write(0xA2);                                    // stelnw tin dieuthunsh tis EEPROM + W
$0610	$0EA2	    			MOVLW	162
$0612	$6E49	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$0614	$EC57	F001			CALL	_Soft_I2C_Write
;ergasia_part3.c,72 :: 			Soft_I2C_Write(2);                                       // Stelnw tin thesi mnimis tis eeprom pou thelw na grapsw
$0618	$0E02	    			MOVLW	2
$061A	$6E49	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$061C	$EC57	F001			CALL	_Soft_I2C_Write
;ergasia_part3.c,73 :: 			Soft_I2C_Write('S');                                     // Send data (data to be written)
$0620	$0E53	    			MOVLW	83
$0622	$6E49	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$0624	$EC57	F001			CALL	_Soft_I2C_Write
;ergasia_part3.c,74 :: 			Soft_I2C_Write('P');                                     // Send data (data to be written)
$0628	$0E50	    			MOVLW	80
$062A	$6E49	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$062C	$EC57	F001			CALL	_Soft_I2C_Write
;ergasia_part3.c,75 :: 			Soft_I2C_Write('A');                                     // Send data (data to be written)
$0630	$0E41	    			MOVLW	65
$0632	$6E49	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$0634	$EC57	F001			CALL	_Soft_I2C_Write
;ergasia_part3.c,76 :: 			Soft_I2C_Write('T');                                     // Send data (data to be written)
$0638	$0E54	    			MOVLW	84
$063A	$6E49	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$063C	$EC57	F001			CALL	_Soft_I2C_Write
;ergasia_part3.c,77 :: 			Soft_I2C_Write('H');                                     // Send data (data to be written)
$0640	$0E48	    			MOVLW	72
$0642	$6E49	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$0644	$EC57	F001			CALL	_Soft_I2C_Write
;ergasia_part3.c,78 :: 			Soft_I2C_Write('I');                                     // Send data (data to be written)
$0648	$0E49	    			MOVLW	73
$064A	$6E49	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$064C	$EC57	F001			CALL	_Soft_I2C_Write
;ergasia_part3.c,79 :: 			Soft_I2C_Write('S');                                     // Send data (data to be written)
$0650	$0E53	    			MOVLW	83
$0652	$6E49	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$0654	$EC57	F001			CALL	_Soft_I2C_Write
;ergasia_part3.c,81 :: 			Soft_I2C_Write('J');                                     // Send data (data to be written)
$0658	$0E4A	    			MOVLW	74
$065A	$6E49	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$065C	$EC57	F001			CALL	_Soft_I2C_Write
;ergasia_part3.c,82 :: 			Soft_I2C_Write('I');                                     // Send data (data to be written)
$0660	$0E49	    			MOVLW	73
$0662	$6E49	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$0664	$EC57	F001			CALL	_Soft_I2C_Write
;ergasia_part3.c,83 :: 			Soft_I2C_Write('M');                                     // Send data (data to be written)
$0668	$0E4D	    			MOVLW	77
$066A	$6E49	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$066C	$EC57	F001			CALL	_Soft_I2C_Write
;ergasia_part3.c,84 :: 			Soft_I2C_Stop();
$0670	$ECB7	F001			CALL	_Soft_I2C_Stop
;ergasia_part3.c,87 :: 			Soft_I2C_Config(&PORTC, 4, 3);                           //Use Port C pins 4 and 3
$0674	$0E82	    			MOVLW	PORTC
$0676	$6E49	    			MOVWF	FARG_Soft_I2C_Init+0, 0
$0678	$0E0F	    			MOVLW	@PORTC
$067A	$6E4A	    			MOVWF	FARG_Soft_I2C_Init+1, 0
$067C	$EC76	F002			CALL	_Soft_I2C_Init
;ergasia_part3.c,88 :: 			Soft_I2C_Start();                                        // Issue I2C start signal
$0680	$EC44	F001			CALL	_Soft_I2C_Start
;ergasia_part3.c,89 :: 			Soft_I2C_Write(0xA2);                                    // stelnw tin dieuthunsh tis EEPROM + W
$0684	$0EA2	    			MOVLW	162
$0686	$6E49	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$0688	$EC57	F001			CALL	_Soft_I2C_Write
;ergasia_part3.c,90 :: 			Soft_I2C_Write(2);                                       // Stelnw tin thesi mnimis tis eeprom pou thelw na grapsw
$068C	$0E02	    			MOVLW	2
$068E	$6E49	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$0690	$EC57	F001			CALL	_Soft_I2C_Write
;ergasia_part3.c,92 :: 			Soft_I2C_Start();                                        // Issue I2C start signal
$0694	$EC44	F001			CALL	_Soft_I2C_Start
;ergasia_part3.c,93 :: 			Soft_I2C_Write(0xA3);                                    // twra exw tin dieuthinsh ths suskeuhs alla gia read
$0698	$0EA3	    			MOVLW	163
$069A	$6E49	    			MOVWF	FARG_Soft_I2C_Write+0, 0
$069C	$EC57	F001			CALL	_Soft_I2C_Write
;ergasia_part3.c,94 :: 			data[0] = Soft_I2C_Read(1);                              // Read data (send ACK)
$06A0	$0E01	    			MOVLW	1
$06A2	$6E49	    			MOVWF	FARG_Soft_I2C_Read+0, 0
$06A4	$ECD4	F001			CALL	_Soft_I2C_Read
$06A8	$C000	F01B			MOVFF	STACK_0, _data
;ergasia_part3.c,95 :: 			data[1] = Soft_I2C_Read(1);                              // Read data (send ACK)
$06AC	$0E01	    			MOVLW	1
$06AE	$6E49	    			MOVWF	FARG_Soft_I2C_Read+0, 0
$06B0	$ECD4	F001			CALL	_Soft_I2C_Read
$06B4	$C000	F01C			MOVFF	STACK_0, _data+1
;ergasia_part3.c,96 :: 			data[2] = Soft_I2C_Read(1);                              // Read data (send ACK)
$06B8	$0E01	    			MOVLW	1
$06BA	$6E49	    			MOVWF	FARG_Soft_I2C_Read+0, 0
$06BC	$ECD4	F001			CALL	_Soft_I2C_Read
$06C0	$C000	F01D			MOVFF	STACK_0, _data+2
;ergasia_part3.c,97 :: 			data[3] = Soft_I2C_Read(1);                              // Read data (send ACK)
$06C4	$0E01	    			MOVLW	1
$06C6	$6E49	    			MOVWF	FARG_Soft_I2C_Read+0, 0
$06C8	$ECD4	F001			CALL	_Soft_I2C_Read
$06CC	$C000	F01E			MOVFF	STACK_0, _data+3
;ergasia_part3.c,98 :: 			data[4] = Soft_I2C_Read(1);                              // Read data (send ACK)
$06D0	$0E01	    			MOVLW	1
$06D2	$6E49	    			MOVWF	FARG_Soft_I2C_Read+0, 0
$06D4	$ECD4	F001			CALL	_Soft_I2C_Read
$06D8	$C000	F01F			MOVFF	STACK_0, _data+4
;ergasia_part3.c,99 :: 			data[5] = Soft_I2C_Read(1);                              // Read data (send ACK)
$06DC	$0E01	    			MOVLW	1
$06DE	$6E49	    			MOVWF	FARG_Soft_I2C_Read+0, 0
$06E0	$ECD4	F001			CALL	_Soft_I2C_Read
$06E4	$C000	F020			MOVFF	STACK_0, _data+5
;ergasia_part3.c,100 :: 			data[6] = Soft_I2C_Read(1);                              // Read data (send ACK)
$06E8	$0E01	    			MOVLW	1
$06EA	$6E49	    			MOVWF	FARG_Soft_I2C_Read+0, 0
$06EC	$ECD4	F001			CALL	_Soft_I2C_Read
$06F0	$C000	F021			MOVFF	STACK_0, _data+6
;ergasia_part3.c,101 :: 			data[7] = Soft_I2C_Read(1);                              // Read data (send ACK)
$06F4	$0E01	    			MOVLW	1
$06F6	$6E49	    			MOVWF	FARG_Soft_I2C_Read+0, 0
$06F8	$ECD4	F001			CALL	_Soft_I2C_Read
$06FC	$C000	F022			MOVFF	STACK_0, _data+7
;ergasia_part3.c,102 :: 			data[8] = Soft_I2C_Read(1);                              // Read data (send ACK)
$0700	$0E01	    			MOVLW	1
$0702	$6E49	    			MOVWF	FARG_Soft_I2C_Read+0, 0
$0704	$ECD4	F001			CALL	_Soft_I2C_Read
$0708	$C000	F023			MOVFF	STACK_0, _data+8
;ergasia_part3.c,103 :: 			data[9] = Soft_I2C_Read(0);                              // Read data (NO ACK)
$070C	$6A49	    			CLRF	FARG_Soft_I2C_Read+0, 0
$070E	$ECD4	F001			CALL	_Soft_I2C_Read
$0712	$C000	F024			MOVFF	STACK_0, _data+9
;ergasia_part3.c,104 :: 			Soft_I2C_Stop();
$0716	$ECB7	F001			CALL	_Soft_I2C_Stop
;ergasia_part3.c,107 :: 			Usart_Init(9600);
$071A	$0E33	    			MOVLW	51
$071C	$6EAF	    			MOVWF	SPBRG, 0
$071E	$84AC	    			BSF	TXSTA, BRGH, 0
$0720	$EC89	F002			CALL	_Usart_Init
;ergasia_part3.c,122 :: 			Usart_Write(data[0]);                                  //tupwnei to S
$0724	$C01B	F049			MOVFF	_data, FARG_Usart_Write+0
$0728	$EC1D	F002			CALL	_Usart_Write
;ergasia_part3.c,123 :: 			Usart_Write(data[1]);                                  //tupwnei to P
$072C	$C01C	F049			MOVFF	_data+1, FARG_Usart_Write+0
$0730	$EC1D	F002			CALL	_Usart_Write
;ergasia_part3.c,124 :: 			Usart_Write(data[2]);                                  //tupwnei to A
$0734	$C01D	F049			MOVFF	_data+2, FARG_Usart_Write+0
$0738	$EC1D	F002			CALL	_Usart_Write
;ergasia_part3.c,125 :: 			Usart_Write(data[3]);
$073C	$C01E	F049			MOVFF	_data+3, FARG_Usart_Write+0
$0740	$EC1D	F002			CALL	_Usart_Write
;ergasia_part3.c,126 :: 			Usart_Write(data[4]);
$0744	$C01F	F049			MOVFF	_data+4, FARG_Usart_Write+0
$0748	$EC1D	F002			CALL	_Usart_Write
;ergasia_part3.c,127 :: 			Usart_Write(data[5]);
$074C	$C020	F049			MOVFF	_data+5, FARG_Usart_Write+0
$0750	$EC1D	F002			CALL	_Usart_Write
;ergasia_part3.c,128 :: 			Usart_Write(data[6]);
$0754	$C021	F049			MOVFF	_data+6, FARG_Usart_Write+0
$0758	$EC1D	F002			CALL	_Usart_Write
;ergasia_part3.c,129 :: 			Usart_Write(' ');
$075C	$0E20	    			MOVLW	32
$075E	$6E49	    			MOVWF	FARG_Usart_Write+0, 0
$0760	$EC1D	F002			CALL	_Usart_Write
;ergasia_part3.c,130 :: 			Usart_Write(data[7]);
$0764	$C022	F049			MOVFF	_data+7, FARG_Usart_Write+0
$0768	$EC1D	F002			CALL	_Usart_Write
;ergasia_part3.c,131 :: 			Usart_Write(data[8]);
$076C	$C023	F049			MOVFF	_data+8, FARG_Usart_Write+0
$0770	$EC1D	F002			CALL	_Usart_Write
;ergasia_part3.c,132 :: 			Usart_Write(data[9]);
$0774	$C024	F049			MOVFF	_data+9, FARG_Usart_Write+0
$0778	$EC1D	F002			CALL	_Usart_Write
;ergasia_part3.c,133 :: 			}
$077C	$	L_main_23:
;ergasia_part3.c,134 :: 			}
$077C	$D7FF	    			BRA	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0008		Delay_1us
$000E		Delay_5500us
$002C		Delay_50us
$0036		Lcd8_Cmd
$0094		SoftI2C_PutZerosToLAT
$00A4		LCD8_Out
$012C		my_read_keypad
$0288		Soft_I2C_Start
$02AE		Soft_I2C_Write
$036E		Soft_I2C_Stop
$03A8		Soft_I2C_Read
$043A		Usart_Write
$0450		Lcd8_Init
$04EC		Soft_I2C_Init
$0512		Usart_Init
$0528		main


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0008		_Delay_1us:
$000E		_Delay_5500us:
$002C		_Delay_50us:
$0036		_Lcd8_Cmd:
$004C		L_Lcd8_Cmd_0:
$0078		L_Lcd8_Cmd_1:
$007A		L_Lcd8_Cmd_2:
$008E		L_Lcd8_Cmd_3:
$0092		L_Lcd8_Cmd_4:
$0094		SoftI2C_PutZerosToLAT:
$00A4		_LCD8_Out:
$00A6		L_LCD8_Out_14:
$00AC		L_LCD8_Out_15:
$00B2		L_LCD8_Out_16:
$00B8		L_LCD8_Out_17:
$00BE		L_LCD8_Out_18:
$00C4		L_LCD8_Out_12:
$00DE		L_LCD8_Out_13:
$00FA		L_LCD8_Out_19:
$0126		L_LCD8_Out_20:
$012C		_my_read_keypad:
$013C		L_my_read_keypad_0:
$0170		L_my_read_keypad_2:
$0182		L_my_read_keypad_4:
$0194		L_my_read_keypad_6:
$01A4		L_my_read_keypad_3:
$01A4		L_my_read_keypad_5:
$01A4		L_my_read_keypad_7:
$01A4		L_my_read_keypad_8:
$01DA		L_my_read_keypad_9:
$01EC		L_my_read_keypad_11:
$01FE		L_my_read_keypad_13:
$020E		L_my_read_keypad_10:
$020E		L_my_read_keypad_12:
$020E		L_my_read_keypad_14:
$020E		L_my_read_keypad_15:
$0244		L_my_read_keypad_16:
$0256		L_my_read_keypad_18:
$0268		L_my_read_keypad_20:
$0278		L_my_read_keypad_17:
$0278		L_my_read_keypad_19:
$0278		L_my_read_keypad_21:
$0278		L_my_read_keypad_22:
$0282		L_my_read_keypad_1:
$0288		_Soft_I2C_Start:
$02AE		_Soft_I2C_Write:
$02BE		L_Soft_I2C_Write_4:
$02D8		L_Soft_I2C_Write_6:
$02EA		l_018:
$02EC		l_01C:
$0306		L_Soft_I2C_Write_5:
$0326		L_Soft_I2C_Write_7:
$036E		_Soft_I2C_Stop:
$03A8		_Soft_I2C_Read:
$03B6		L_Soft_I2C_Read_0:
$03CA		L_Soft_I2C_Read_2:
$03F2		L_Soft_I2C_Read_1:
$0400		L_Soft_I2C_Read_3:
$040A		L_07C:
$043A		_Usart_Write:
$043A		L_Usart_Write_3:
$044A		L_Usart_Write_4:
$0450		_Lcd8_Init:
$04EC		_Soft_I2C_Init:
$0512		_Usart_Init:
$051C		L_Usart_Init_0:
$0526		L_Usart_Init_1:
$0528		_main:
$077C		L_main_23:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		STACK_0
$0001		STACK_1
$0002		STACK_2
$0003		STACK_3
$0004		STACK_4
$0005		STACK_5
$0006		STACK_6
$0007		STACK_7
$0008		STACK_8
$0009		STACK_9
$000A		STACK_10
$000B		STACK_11
$000C		STACK_12
$000D		STACK_13
$000E		STACK_14
$000F		STACK_15
$0010		STACK_16
$0011		STACK_17
$0012		STACK_18
$0013		STACK_19
$0014		STACK_20
$0015		Lcd8bit_main_global_dataAddress
$0017		Lcd8bit_main_global_ctrlAddress
$0019		Lcd8bit_main_global_cmd
$001A		___porti2c
$001B		_data
$0026		lstr1_ergasia_part3
$0034		lstr2_ergasia_part3
$0045		main_text_L0
$0047		main_text1_L0
$0049		FARG_Lcd8_Init+0
$0049		FARG_LCD8_Out+0
$0049		FARG_Soft_I2C_Init+0
$0049		FARG_Soft_I2C_Read+0
$0049		FARG_Soft_I2C_Write+0
$0049		FARG_Usart_Init+0
$0049		FARG_Usart_Write+0
$0049		my_read_keypad_var_L0
$004A		FARG_LCD8_Out+1
$004A		my_read_keypad_key_L0
$004A		Soft_I2C_Read_result_L0
$004A		Soft_I2C_Write_temp_L0
$004B		FARG_Lcd8_Init+2
$004B		FARG_LCD8_Out+2
$004B		Soft_I2C_Read_temp_L0
$004B		Soft_I2C_Write_result_L0
$004D		LCD8_Out_i_L0
$004D		Usart_Init_tmp_L0
$004E		FARG_Lcd8_Cmd+0
$0F81		PORTB
$0F82		PORTC
$0F83		PORTD
$0F84		PORTE
$0F93		TRISB
$0F94		TRISC
$0F95		TRISD
$0F9E		PIR1
$0FAB		RCSTA
$0FAC		TXSTA
$0FAD		TXREG
$0FAE		RCREG
$0FAF		SPBRG
$0FD8		STATUS
$0FD9		FSR2L
$0FDA		FSR2H
$0FDB		PLUSW2
$0FDC		PREINC2
$0FDD		POSTDEC2
$0FDE		POSTINC2
$0FDF		INDF2
$0FE0		BSR
$0FE1		FSR1L
$0FE2		FSR1H
$0FE3		PLUSW1
$0FE4		PREINC1
$0FE5		POSTDEC1
$0FE6		POSTINC1
$0FE7		INDF1
$0FE8		WREG
$0FE9		FSR0L
$0FEA		FSR0H
$0FEB		PLUSW0
$0FEC		PREINC0
$0FED		POSTDEC0
$0FEE		POSTINC0
$0FEF		INDF0
$0FF3		PRODL
$0FF4		PRODH
$0FF5		TABLAT
$0FF6		TBLPTRL
$0FF7		TBLPTRH
$0FF8		TBLPTRU
$0FF9		PCL
$0FFA		PCLATH
$0FFB		PCLATU
$0FFD		TOSL
$0FFE		TOSH
$0FFF		TOSU


